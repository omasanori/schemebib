@String{inst-ATR-HIP = "ATR Human Information Processing Research
                 Laboratories"}

@String{inst-IU = "Indiana University"}

@String{inst-MIT = "Massachusetts Institute of Technology"}

@String{inst-NECRI = "NEC Research Institute"}

@String{inst-UTAUSTIN = "University of Texas at Austin"}

@String{j-SIGPLAN-LISPP = "ACM SIGPLAN Lisp Pointers"}

@String{j-SIGPLAN-NOTICES = "ACM SIGPLAN Notices"}

@String{proc-HOPL = "Proceedings of the ACM SIGPLAN Conference on
                 History of Programming Languages"}

@String{proc-LFP = "Proceedings of the ACM Conference on LISP and
                 Functional Programming"}

@String{proc-PEPM = "Proceedings of the ACM SIGPLAN Workshop on Partial
                 Evaluation and Semantics-Based Program Manipulation"}

@String{proc-PLDI = "Proceedings of the ACM SIGPLAN Conference on
                 Programming Language Design and Implementation"}

@String{proc-POPL = "Proceedings of the ACM SIGPLAN-SIGACT Symposium on
                 Principles of Programming Languages"}

@String{proc-POPL-2017 = "Proceedings of the ACM SIGPLAN Symposium on
                 Principles of Programming Languages"}

@String{proc-Scheme = "Proceedings of the Workshop on Scheme and
                 Functional Programming"}

@String{pub-ACM = "Association for Computing Machinery"}

@String{pub-ACM:adr = "New York, NY, USA"}

@String{pub-SSBM = "Springer Science and Business Media LLC"}

@InProceedings{AdC:1993a,
  author =       "Norman I. {Adams IV} and Pavel Curtis and Mike
                 Spreitzer",
  title =        "{First-class Data-type Representations in
                 \textsc{SchemeXerox}}",
  booktitle =    proc-PLDI,
  year =         "1993",
  ISBN =         "978-0-89791-598-4",
  series =       "PLDI",
  pages =        "139--146",
  URL =          "https://dl.acm.org/doi/10.1145/155090.155103",
  doi =          "10.1145/155090.155103",
  abstract =     "In most programming language implementations, the
                 compiler has detailed knowledge of the representations
                 of and operations on primitive data typed and data-type
                 constructors. In \textsc{SchemeXerox}, this knowledge
                 is almost entirely external to the compiler, in
                 ordinary, procedural user code. The primitive
                 representations and operations are embodied in
                 first-class ``representation types'' that are
                 constructed and implemented in an abstract and
                 high-level fashion. Despite this abstractness, a few
                 generally-useful optimizing transformations are
                 sufficient to allow the \textsc{SchemeXerox} compiler
                 to generate efficient code for the primitive
                 operations, essentially as good as could be achieved
                 using more contorted, traditional techniques.",
}

@Article{AdC:1993b,
  author =       "Norman I. {Adams IV} and Pavel Curtis and Mike
                 Spreitzer",
  title =        "{First-class Data-type Representations in
                 \textsc{SchemeXerox}}",
  journal =      j-SIGPLAN-NOTICES,
  year =         "1993",
  volume =       "28",
  number =       "6",
  pages =        "139--146",
  month =        jun,
  URL =          "https://dl.acm.org/doi/10.1145/173262.155103",
  doi =          "10.1145/173262.155103",
  abstract =     "In most programming language implementations, the
                 compiler has detailed knowledge of the representations
                 of and operations on primitive data typed and data-type
                 constructors. In \textsc{SchemeXerox}, this knowledge
                 is almost entirely external to the compiler, in
                 ordinary, procedural user code. The primitive
                 representations and operations are embodied in
                 first-class ``representation types'' that are
                 constructed and implemented in an abstract and
                 high-level fashion. Despite this abstractness, a few
                 generally-useful optimizing transformations are
                 sufficient to allow the \textsc{SchemeXerox} compiler
                 to generate efficient code for the primitive
                 operations, essentially as good as could be achieved
                 using more contorted, traditional techniques.",
}

@Article{AnL:1994a,
  author =       "S. Anglade and J. J. Lacrampe and C. Queinnec",
  title =        "{Semantics of Combinations in Scheme}",
  journal =      j-SIGPLAN-LISPP,
  year =         "1994",
  volume =       "VII",
  number =       "4",
  pages =        "15--20",
  month =        oct,
  URL =          "https://dl.acm.org/doi/10.1145/382109.382669",
  doi =          "10.1145/382109.382669",
  abstract =     "This paper presents a denotational semantics for the
                 combinations of the Scheme language. Scheme leaves
                 unspecified the order of evaluation of the terms of a
                 combination. Our purpose is to formally and
                 denotationally characterize such indeterminacy. We
                 achieve this by extending the denotation as well as the
                 domain of final answers to take into account the
                 various possible orders of evaluation.",
}

@InProceedings{AsD:1994a,
  author =       "J. Michael Ashley and R. Kent Dybvig",
  title =        "An Efficient Implementation of Multiple Return Values
                 in Scheme",
  booktitle =    proc-LFP,
  year =         "1994",
  ISBN =         "978-0-89791-643-1",
  series =       "LFP",
  pages =        "140--149",
  URL =          "https://dl.acm.org/doi/10.1145/182409.156784",
  doi =          "10.1145/182409.156784",
  abstract =     "This paper describes an implementation of the new
                 Scheme multiple values interface. The implementation
                 handles multiple values efficiently, with no run-time
                 overhead for normal calls and returns. Error checks are
                 performed where necessary to insure that the expected
                 number of values is returned in all situations. The
                 implementation fits cleanly with our direct-style
                 compiler and stack-based representation of control, but
                 is equally well suited to continuation-passing style
                 compilers and to heap-based run-time architectures.",
}

@Article{AsD:1994b,
  author =       "J. Michael Ashley and R. Kent Dybvig",
  title =        "An Efficient Implementation of Multiple Return Values
                 in Scheme",
  journal =      j-SIGPLAN-LISPP,
  year =         "1994",
  volume =       "VII",
  number =       "3",
  pages =        "140--149",
  month =        jul,
  URL =          "https://doi.org/10.1145/182590.156784",
  doi =          "10.1145/182590.156784",
  abstract =     "This paper describes an implementation of the new
                 Scheme multiple values interface. The implementation
                 handles multiple values efficiently, with no run-time
                 overhead for normal calls and returns. Error checks are
                 performed where necessary to insure that the expected
                 number of values is returned in all situations. The
                 implementation fits cleanly with our direct-style
                 compiler and stack-based representation of control, but
                 is equally well suited to continuation-passing style
                 compilers and to heap-based run-time architectures.",
}

@Misc{Ba:1993a,
  author =       "Alan Bawden",
  title =        "Implementing Distributed Systems Using Linear Naming",
  note =         "PhD. Thesis. MIT AI Lab Technical Report AITR-1627.",
  month =        mar,
  year =         "1993",
}

@InProceedings{Ba:1999a,
  author =       "Alan Bawden",
  title =        "Quasiquotation in Lisp",
  booktitle =    proc-PEPM,
  year =         "1999",
  series =       "PEPM",
  pages =        "4--12",
  URL =          "https://www.brics.dk/NS/99/1/BRICS-NS-99-1.pdf",
  abstract =     "Quasiquotation is the technology commonly used in Lisp
                 to write program-generating programs. In this paper I
                 will review the history and development of this
                 technology, and explain why it works so well in
                 practice.",
}

@InProceedings{Ba:2000a,
  author =       "Alan Bawden",
  title =        "First-Class Macros Have Types",
  booktitle =    proc-POPL,
  year =         "2000",
  ISBN =         "978-1-58113-125-3",
  series =       "POPL",
  pages =        "133--141",
  URL =          "https://dl.acm.org/doi/10.1145/325694.325710",
  doi =          "10.1145/325694.325710",
  abstract =     "In modern Scheme, a macro captures the lexical
                 environment where it is defined. This creates an
                 opportunity for extending Scheme so that macros are
                 first-class values. The key to achieving this goal,
                 while preserving the ability to compile programs into
                 reasonable code, is the addition of a type system. Many
                 interesting things can be done with first-class macros,
                 including the construction of a useful module system in
                 which modules are also first-class. Clams got legs! ---
                 \textit{B.C.}",
}

@InProceedings{BaC:2011a,
  author =       "Eli Barzilay and Ryan Culpepper and Matthew Flatt",
  title =        "{Keeping it Clean with Syntax Parameters}",
  booktitle =    proc-Scheme,
  year =         "2011",
  series =       "Scheme",
  URL =          "http://www.schemeworkshop.org/2011/papers/Barzilay2011.pdf",
  abstract =     "Racket's syntax parameters support the hygienic
                 implementation of syntactic forms that would otherwise
                 introduce implicit identifiers unhygienically.",
}

@TechReport{BaR:1988a,
  author =       "Alan Bawden and Jonathan A. Rees",
  title =        "{Syntactic Closures}",
  institution =  inst-MIT,
  type =         "AI Memos",
  number =       "AIM-1049",
  year =         "1988",
  month =        jun,
  URL =          "http://hdl.handle.net/1721.1/6036",
  abstract =     "In this paper we describe \textit{syntactic closures.}
                 Syntactic closures address the scoping problems that
                 arise when writing macros. We discuss some issues
                 raised by introducing syntactic closures into the macro
                 expansion interface, and we compare syntactic closures
                 with other approaches. Included is a complete
                 implementation.",
}

@InProceedings{BaR:1988b,
  author =       "Alan Bawden and Jonathan A. Rees",
  title =        "{Syntactic Closures}",
  booktitle =    proc-LFP,
  year =         "1988",
  ISBN =         "978-0-89791-273-0",
  series =       "LFP",
  pages =        "86--95",
  URL =          "https://dl.acm.org/doi/10.1145/62678.62687",
  doi =          "10.1145/62678.62687",
  abstract =     "In this paper we describe \textit{syntactic closures}.
                 Syntactic closures address the scoping problems that
                 arise when writing macros. We discuss some issues
                 raised by introducing syntactic closures into the macro
                 expansion interface, and we compare syntactic closures
                 with other approaches. Included is a complete
                 implementation.",
}

@InProceedings{BiD:2008a,
  author =       "Małgorzata Biernacka and Olivier Danvy",
  title =        "{Towards Compatible and Interderivable Semantic
                 Specifications for the Scheme Programming Language,
                 Part II: Reduction Semantics and Abstract Machines}",
  booktitle =    proc-Scheme,
  year =         "2008",
  series =       "Scheme",
  URL =          "http://www.schemeworkshop.org/2008/paper4.pdf",
  abstract =     "We present a context-sensitive reduction semantics for
                 a lambda-calculus with explicit substitutions and store
                 and we show that the functional implementation of this
                 small-step semantics mechanically corresponds to that
                 of an abstract machine. This abstract machine is very
                 close to the abstract machine for Core Scheme presented
                 by Clinger at PLDI'98. This lambda-calculus with
                 explicit substitutions and store therefore aptly
                 accounts for Core Scheme.",
}

@TechReport{Bl:1995a,
  author =       "Matthias Blume",
  title =        "Refining Hygienic Macros for Modules and Separate
                 Compilation",
  institution =  inst-ATR-HIP,
  type =         "ATR Technical Report",
  number =       "TR-H-171",
  year =         "1995",
  note =         "Unidentified",
}

@InProceedings{BoA:1992a,
  author =       "Ana Bove and Laura Arbilla",
  title =        "{A Confluent Calculus of Macro Expansion and
                 Evaluation}",
  booktitle =    proc-LFP,
  year =         "1992",
  ISBN =         "978-0-89791-481-9",
  series =       "LFP",
  pages =        "278--287",
  URL =          "https://doi.org/10.1145/141471.141562",
  doi =          "10.1145/141471.141562",
  abstract =     "Syntactic abbreviations or \textit{macros} provide a
                 powerful tool to increase the syntactic expressiveness
                 of programming languages. The expansion of these
                 abbreviations can be modeled with substitutions. This
                 paper presents an operational semantics of macro
                 expansions and evaluation where substitutions are
                 handled explicitly. The semantics is defined in terms
                 of a confluent, simple, and intuitive set of rewriting
                 rules. The resulting semantics is also a basis for
                 developing correct implementations.",
}

@Article{BoA:1992b,
  author =       "Ana Bove and Laura Arbilla",
  title =        "{A Confluent Calculus of Macro Expansion and
                 Evaluation}",
  journal =      j-SIGPLAN-LISPP,
  year =         "1992",
  volume =       "V",
  number =       "1",
  month =        jan,
  URL =          "https://doi.org/10.1145/141478.141562",
  doi =          "10.1145/141478.141562",
  abstract =     "Syntactic abbreviations or \textit{macros} provide a
                 powerful tool to increase the syntactic expressiveness
                 of programming languages. The expansion of these
                 abbreviations can be modeled with substitutions. This
                 paper presents an operational semantics of macro
                 expansions and evaluation where substitutions are
                 handled explicitly. The semantics is defined in terms
                 of a confluent, simple, and intuitive set of rewriting
                 rules. The resulting semantics is also a basis for
                 developing correct implementations.",
}

@Misc{BrC:1986a,
  author =       "Jean-Pierre Briot and Pierre Cointe and Emmanuel
                 Saint-James",
  title =        "Reécriture et récursion dans une fermeture - Etude
                 dans un Lisp à liaison superficielle - Application aux
                 objets",
  note =         "Actes des Journées AFCET-Informatique Langages
                 Orientés Objet, BIGRE+Globule. 48.",
  month =        jan,
  year =         "1986",
}

@InProceedings{BrW:1996a,
  author =       "Carl Bruggeman and Oscar Waddell and R. Kent Dybvig",
  title =        "Representing Control in the Presence of One-Shot
                 Continuations",
  booktitle =    proc-PLDI,
  year =         "1996",
  ISBN =         "978-0-89791-795-7",
  series =       "PLDI",
  pages =        "99--107",
  URL =          "https://dl.acm.org/doi/10.1145/231379.231395",
  doi =          "10.1145/231379.231395",
  abstract =     "Traditional first-class continuation mechanisms allow
                 a captured continuation to be invoked multiple times.
                 Many continuations, however, are invoked only once.
                 This paper introduces \textit{one-shot} continuations,
                 shows how they interact with traditional multi-shot
                 continuations, and describes a stack-based
                 implementation of control that handles both one-shot
                 and multi-shot continuations. The implementation
                 eliminates the copying overhead for one-shot
                 continuations that is inherent in multi-shot
                 continuations.",
}

@Article{BrW:1996b,
  author =       "Carl Bruggeman and Oscar Waddell and R. Kent Dybvig",
  title =        "Representing Control in the Presence of One-Shot
                 Continuations",
  journal =      j-SIGPLAN-NOTICES,
  year =         "1996",
  volume =       "31",
  number =       "5",
  pages =        "99--107",
  month =        may,
  URL =          "https://dl.acm.org/doi/10.1145/249069.231395",
  doi =          "10.1145/249069.231395",
  abstract =     "Traditional first-class continuation mechanisms allow
                 a captured continuation to be invoked multiple times.
                 Many continuations, however, are invoked only once.
                 This paper introduces \textit{one-shot} continuations,
                 shows how they interact with traditional multi-shot
                 continuations, and describes a stack-based
                 implementation of control that handles both one-shot
                 and multi-shot continuations. The implementation
                 eliminates the copying overhead for one-shot
                 continuations that is inherent in multi-shot
                 continuations.",
}

@MastersThesis{Ca:1996a,
  author =       "Stephen Paul Carl",
  title =        "{Syntactic Exposures - A Lexically-Scoped Macro
                 Facility for Extensible Compilers}",
  school =       inst-UTAUSTIN,
  year =         "1996",
  month =        dec,
  URL =          "https://www.cs.utexas.edu/ftp/garbage/carl-msthesis.ps",
  abstract =     "This thesis describes an implementation of
                 \textit{syntactic extensions} (or \textit{macros})
                 which is novel in that it provides a new solution to
                 the \textit{name capture} problem and a foundation on
                 which to build extensible compilers through
                 \textit{reflection on scope and context.} Syntactic
                 extension is a powerful mechanism which can be used to
                 extend the capabilities of a programming language by
                 expressing new syntactic forms in terms of the base
                 language. With the power comes a price --- used
                 carelessly, such extensions can introduce subtle errors
                 into a program, because traditional implementations do
                 not respect the lexical scope of identifiers.
                 \textit{Lexically-scoped} macro facilities were
                 developed to ensure that lexical scope of identifiers
                 is not violated; problems such as name capture, which
                 can cause unexpected side effects, are thus avoided.
                 The approach described here, called \textit{syntactic
                 exposures,} performs syntactic extension without macro
                 expansion; rather than replacing macro calls with macro
                 body forms during a prepass, a macro's body expression
                 are compiled in place at the point of call. A
                 refinement of normal scoping mechanisms prevents name
                 capture from occurring, and compile-time information is
                 used to determine how to treat identifiers. These
                 features can be exploited to write macros which act as
                 ``hooks'' into the compiler to modify scope rules, and
                 to perform context-sensitive analyses and
                 optimizations.",
}

@Misc{Cl:1987a,
  author =       "William D. Clinger",
  title =        "The Scheme of things: Streams versus Generators",
  note =         "Tektronix, Inc. Technical Report.",
  year =         "1987",
}

@Misc{Cl:1988a,
  author =       "William D. Clinger",
  title =        "Semantics of Scheme",
  note =         "BYTE.",
  month =        feb,
  year =         "1988",
}

@Misc{Cl:1991a,
  author =       "William D. Clinger",
  title =        "Macros in Scheme",
  note =         "Lisp Pointers. IV(4).",
  month =        dec,
  year =         "1991",
}

@Misc{Cl:1991b,
  author =       "William D. Clinger",
  title =        "Hygienic macros through explicit renaming",
  note =         "Lisp Pointers. IV(4).",
  month =        dec,
  year =         "1991",
}

@InProceedings{Cl:1998a,
  author =       "William D. Clinger",
  title =        "{Proper Tail Recursion and Space Efficiency}",
  booktitle =    proc-PLDI,
  year =         "1998",
  ISBN =         "978-0-89791-987-6",
  series =       "PLDI",
  pages =        "174--185",
  URL =          "https://dl.acm.org/doi/10.1145/277650.277719",
  doi =          "10.1145/277650.277719",
  abstract =     "The IEEE/ANSI standard for Scheme requires
                 implementations to be \textit{properly tail recursive.}
                 This ensures that portable code can rely upon the space
                 efficiency of continuation-passing style and other
                 idioms. On its face, proper tail recursion concerns the
                 efficiency of procedure calls that occur within a tail
                 context. When examined closely, proper tail recursion
                 also depends upon the fact that garbage collection can
                 be asymptotically more space-efficient than Algol-like
                 stack allocation. Proper tail recursion is not the same
                 as ad hoc tail call optimization in stack-based
                 languages. Proper tail recursion often precludes stack
                 allocation of variables, but yields a well-defined
                 asymptotic space complexity that can be relied upon by
                 portable programs.This paper offers a formal and
                 implementation-independent definition of proper tail
                 recursion for Scheme. It also shows how an entire
                 family of reference implementations can be used to
                 characterize related safe-for-space properties, and
                 proves the asymptotic inequalities that hold between
                 them.",
}

@Article{Cl:1998b,
  author =       "William D. Clinger",
  title =        "{Proper Tail Recursion and Space Efficiency}",
  journal =      j-SIGPLAN-NOTICES,
  year =         "1998",
  volume =       "33",
  number =       "5",
  pages =        "174--185",
  month =        may,
  URL =          "https://dl.acm.org/doi/10.1145/277652.277719",
  doi =          "10.1145/277652.277719",
  abstract =     "The IEEE/ANSI standard for Scheme requires
                 implementations to be \textit{properly tail recursive.}
                 This ensures that portable code can rely upon the space
                 efficiency of continuation-passing style and other
                 idioms. On its face, proper tail recursion concerns the
                 efficiency of procedure calls that occur within a tail
                 context. When examined closely, proper tail recursion
                 also depends upon the fact that garbage collection can
                 be asymptotically more space-efficient than Algol-like
                 stack allocation. Proper tail recursion is not the same
                 as ad hoc tail call optimization in stack-based
                 languages. Proper tail recursion often precludes stack
                 allocation of variables, but yields a well-defined
                 asymptotic space complexity that can be relied upon by
                 portable programs.This paper offers a formal and
                 implementation-independent definition of proper tail
                 recursion for Scheme. It also shows how an entire
                 family of reference implementations can be used to
                 characterize related safe-for-space properties, and
                 proves the asymptotic inequalities that hold between
                 them.",
}

@Misc{ClF:1985a,
  author =       "William D. Clinger and Daniel P. Friedman and Mitchell
                 Wand",
  title =        "A Scheme for a Higher-Level Semantic Algebra",
  note =         "Algebraic Methods in Semantics.",
  year =         "1985",
}

@Misc{ClF:2004a,
  author =       "John Clements and Matthias Felleisen",
  title =        "A Tail-Recursive Machine with Stack Inspection",
  note =         "Transactions on Programming Languages and Systems.",
  year =         "2004",
}

@Misc{ClR:1991a,
  author =       "William D. Clinger and Jonathan A. Rees",
  title =        "Macros that work",
  note =         "Conference Record of the Eighteenth Annual ACM
                 Symposium on Principles of Programming Languages.",
  month =        jan,
  year =         "1991",
}

@Misc{CoK:2006a,
  author =       "Gregory H. Cooper and Shriram Krishnamurthi",
  title =        "Embedding Dynamic Dataflow in a Call-by-Value
                 Language",
  note =         "European Symposium on Programming, 2006.",
  year =         "2006",
}

@Misc{CuF:2003a,
  author =       "Ryan Culpepper and Matthias Felleisen",
  title =        "Well-Shaped Macros",
  note =         "Scheme Workshop 2003.",
  month =        nov,
  year =         "2003",
}

@Misc{CuF:2004a,
  author =       "Ryan Culpepper and Matthias Felleisen",
  title =        "Taming Macros",
  note =         "Generative Programming and Component Engineering (GPCE
                 2004).",
  month =        oct,
  year =         "2004",
}

@Misc{CuF:2006a,
  author =       "Ryan Culpepper and Matthias Felleisen",
  title =        "A Stepper for Scheme Macros",
  note =         "2006 Workshop on Scheme and Functional Programming.",
  month =        sep,
  year =         "2006",
}

@Misc{CuTH:2007a,
  author =       "Ryan Culpepper and Sam Tobin-Hochstadt and Matthew
                 Flatt",
  title =        "Advanced Macrology and the Implementation of Typed
                 Scheme",
  note =         "2007 Workshop on Scheme and Functional Programming.",
  month =        sep,
  year =         "2007",
}

@InProceedings{Da:2008a,
  author =       "Olivier Danvy",
  title =        "{Towards Compatible and Interderivable Semantic
                 Specifications for the Scheme Programming Language,
                 Part I: Denotational Semantics, Natural Semantics, and
                 Abstract Machines}",
  booktitle =    proc-Scheme,
  year =         "2008",
  series =       "Scheme",
  URL =          "http://www.schemeworkshop.org/2008/paper3.pdf",
  abstract =     "We derive two big-step abstract machines, a natural
                 semantics, and the valuation function of a denotational
                 semantics based on the small-step abstract machine for
                 Core Scheme presented by Clinger at PLDI'98. Starting
                 from a functional implementation of this small-step
                 abstract machine, (1) we fuse its transition function
                 with its driver loop, obtaining the functional
                 implementation of a big-step abstract machine; (2) we
                 adjust this big-step abstract machine so that it is in
                 defunctionalized form, obtaining the functional
                 implementation of a second big-step abstract machine;
                 (3) we refunctionalize this adjusted abstract machine,
                 obtaining the functional implementation of a natural
                 semantics in continuation style; and (4) we
                 closure-unconvert this natural semantics, obtaining a
                 compositional continuation-passing evaluation function
                 which we identify as the functional implementation of a
                 denotational semantics in continuation style. We then
                 compare this valuation function with that of Clinger's
                 original denotational semantics of Scheme.",
}

@Misc{DeD:1989a,
  author =       "Alain Deutsch and Renaud Dumeur and Charles Consel and
                 Jean-Daniel Fekete",
  title =        "{CSKIM}: An Extended Dialect of Scheme",
  note =         "BIGRE Bulletin. 65.",
  month =        jul,
  year =         "1989",
}

@Article{Di:1992a,
  author =       "Ken Dickey",
  title =        "The Scheme Programming Language",
  journal =      "Computer Language",
  month =        jun,
  year =         "1992",
  note =         "Unidentified",
}

@Misc{Di:1992b,
  author =       "Ken Dickey",
  title =        "Scheming with Objects",
  note =         "Computer Language.",
  month =        oct,
  year =         "1992",
}

@Misc{Du:1995a,
  author =       "Stéphane Ducasse",
  title =        "Inheritance Mechanism Reification by Means of First
                 Class Object",
  note =         "International IJCAI'95 Workshop on Reflection and Meta
                 - Level Architectures and their Applications in AI.",
  year =         "1995",
}

@Misc{Du:1996a,
  author =       "Stéphane Ducasse",
  title =        "Reifying Inheritance in a Reflective Language",
  note =         "Université de Nice-Sophia Antipolis. I3S Lab
                 RR-95-28.",
  year =         "1996",
}

@Misc{Du:1997a,
  author =       "Stéphane Ducasse",
  title =        "Intégration réflexive de dépendances dans un
                 modèle à classes",
  note =         "PhD. Thesis. Université de Nice-Sophia Antipolis.",
  month =        jan,
  year =         "1997",
}

@Misc{DuBF:1995a,
  author =       "Stéphane Ducasse and Mireille Blay-Fornarino and
                 Anne-Marie Pinna",
  title =        "A Reflective Model for First Class Dependencies",
  note =         "OOPSLA'95 (International Conference on Object -
                 Oriented Programming Systems Languages and
                 Applications).",
  month =        oct,
  year =         "1995",
}

@Misc{DuBF:1996a,
  author =       "Stéphane Ducasse and Mireille Blay-Fornarino and
                 Anne-Marie Pinna",
  title =        "Object and Dependency Oriented Programming in {FLO}",
  note =         "ISMIS'96 (International Symposium on Methodologies for
                 Intelligent Systems).",
  month =        jun,
  year =         "1996",
}

@Misc{DuF:1987a,
  author =       "Bruce F. Duba and Matthias Felleisen and Daniel P.
                 Friedman",
  title =        "Dynamic Identifiers can be Neat",
  note =         "Indiana University. Computer Science Technical Report
                 No. 220.",
  month =        apr,
  year =         "1987",
}

@Misc{DuK:2002a,
  author =       "Christopher Dutchyn and Gregor Kiczales and Hidehiko
                 Masuhara",
  title =        "{AOP} Language Exploration Using the Aspect Sand Box",
  note =         "Aspect-Oriented Software Development (AOSD 2002).",
  month =        apr,
  year =         "2002",
}

@Misc{DuR:1997a,
  author =       "Stéphane Ducasse and Tamar Richner",
  title =        "Executable Connectors: Towards Reusable Design
                 Elements",
  note =         "ESEC/FSE'97 (European Software Engineering
                 Conference).",
  month =        sep,
  year =         "1997",
}

@Misc{DuT:2006,
  author =       "Christopher Dutchyn and David B. Tucker and Shriram
                 Krishnamurthi",
  title =        "Semantics and Scoping of Aspects in Higher-Order
                 Languages",
  note =         "Science of Computer Programming.",
  year =         "2006",
}

@Book{Dy:1987a,
  title =        "{The Scheme Programmming Language}",
  author =       "R. Kent Dybvig",
  year =         "1987",
  publisher =    "Prentice-Hall",
}

@Misc{Dy:1992a,
  author =       "R. Kent Dybvig",
  title =        "Writing Hygenic Macros in Scheme with Syntax-Case",
  note =         "Computer Science Department, Indiana University.
                 TR-356.",
  month =        jun,
  year =         "1992",
}

@Book{Dy:1996a,
  title =        "{The Scheme Programmming Language}",
  author =       "R. Kent Dybvig",
  year =         "1996",
  edition =      "2",
  publisher =    "Prentice Hall",
  URL =          "https://www.scheme.com/tspl2/",
}

@Manual{Dy:1998a,
  author =       "R. Kent Dybvig",
  title =        "Chez Scheme User's Guide",
  year =         "1998",
  note =         "Unidentified",
}

@Book{Dy:2003a,
  title =        "{The Scheme Programmming Language}",
  author =       "R. Kent Dybvig",
  year =         "2003",
  edition =      "3",
  publisher =    "MIT Press",
  URL =          "https://www.scheme.com/tspl3/",
}

@Book{Dy:2009a,
  title =        "{The Scheme Programmming Language}",
  author =       "R. Kent Dybvig",
  year =         "2009",
  edition =      "4",
  publisher =    "MIT Press",
  URL =          "https://www.scheme.com/tspl4/",
}

@Misc{DyF:1986a,
  author =       "R. Kent Dybvig and Daniel P. Friedman and Christopher
                 T. Haynes",
  title =        "Expansion-Passing style: Beyond Conventional Macros",
  note =         "Conference Record of the 1986 ACM Conference on Lisp
                 and Functional Programming.",
  year =         "1986",
}

@Misc{DyF:1988a,
  author =       "R. Kent Dybvig and Daniel P. Friedman and Christopher
                 T. Haynes",
  title =        "Expansion-Passing Style: {A} General Macro Mechanism",
  note =         "LISP and Symbolic Computation. 1(1).",
  month =        jun,
  year =         "1988",
}

@Misc{DyH:1988a,
  author =       "R. Kent Dybvig and Robert Hieb",
  title =        "A Variable-Arity Procedural Interface",
  note =         "Proceedings of the 1988 ACM Symposium on LISP and
                 Functional Programming.",
  month =        jul,
  year =         "1988",
}

@Article{DyH:1990a,
  author =       "R. Kent Dybvig and Robert Hieb",
  title =        "A new approach to procedures with variable arity",
  journal =      "Lisp and Symbolic Computation",
  year =         "1990",
  volume =       "3",
  number =       "3",
  pages =        "229--244",
  month =        sep,
  URL =          "https://link.springer.com/article/10.1007/BF01806099",
  doi =          "10.1007/BF01806099",
  abstract =     "This article presents a convenient and efficient
                 procedural interface that allows the definition and use
                 of procedures with optional arguments and indefinite
                 numbers of arguments without resorting to the use of a
                 language-dependent data structure in which to store the
                 arguments. This interface solves many of the problems
                 inherent in the use of lists in Lisp and Scheme to
                 store indefinite numbers of arguments. Simple recursion
                 can be used to consume such arguments without the
                 complexity problems that are caused by the use of the
                 Lisp procedure \textit{apply} on argument lists. A
                 natural extension to the interface to support multiple
                 return values is presented.",
}

@Misc{DyH:1993a,
  author =       "R. Kent Dybvig and Robert Hieb and Carl Bruggeman",
  title =        "Syntactic abstraction in Scheme",
  note =         "Lisp and Symbolic Computation. 5, 4.",
  month =        dec,
  year =         "1993",
}

@Misc{EaF:2009a,
  author =       "Carl Eastlund and Matthias Felleisen",
  title =        "Sequence Traces for Object-Oriented Executions",
  note =         "2009 Workshop on Scheme and Functional Programming",
  month =        aug,
  year =         "2009",
}

@Misc{EgK:2004a,
  author =       "Sebastian Egner and Richard A. Kelsey and Michael
                 Sperber",
  title =        "Cleaning up the Tower: Numbers in Scheme",
  note =         "2004 Scheme Workshop",
  month =        sep,
  year =         "2004",
}

@PhdThesis{Fe:1987a,
  title =        "{The calculi of $\lambda_{\nu}$-CS conversion: A
                 syntactic theory of control and state in imperative
                 higher-order programming languages}",
  author =       "Matthias Felleisen",
  school =       inst-IU,
  year =         "1987",
  month =        aug,
  URL =          "https://www.proquest.com/docview/303475687",
}

@Misc{Fe:1987b,
  author =       "Matthias Felleisen",
  title =        "Reflections on Landin's {J}-Operator: {A} Partly
                 Historical Note",
  note =         "Journal of Computer Languages. 12. 3/4.",
  year =         "1987",
}

@InProceedings{Fe:1988a,
  author =       "Matthias Felleisen",
  title =        "{$\lambda_{\nu}$-CS: An Extended $\lambda$-Calculus
                 for Scheme}",
  booktitle =    proc-LFP,
  year =         "1988",
  ISBN =         "978-0-89791-273-0",
  series =       "LFP",
  pages =        "72--85",
  URL =          "https://dl.acm.org/doi/10.1145/62678.62686",
  doi =          "10.1145/62678.62686",
}

@Misc{Fe:1991a,
  author =       "Matthias Felleisen",
  title =        "({Y} {Y}) Works! {A} Lecture on the Why of {Y}",
  month =        sep,
  year =         "1991",
  note =         "Unidentified",
}

@Misc{FeC:1983a,
  author =       "Carol Fessenden and William D. Clinger and Daniel P.
                 Friedman and Christopher T. Haynes",
  title =        "Scheme 311 version 4 Reference Manual",
  note =         "Indiana University. Computer Science Technical Report
                 137.",
  month =        feb,
  year =         "1983",
}

@Misc{FeF:1986a,
  author =       "Matthias Felleisen and Daniel P. Friedman",
  title =        "Control operators, the {SECD}-machine, and the
                 lambda-calculus",
  note =         "3rd Working Conference on the Formal Description of
                 Programming Concepts.",
  month =        aug,
  year =         "1986",
}

@Misc{FeF:1987a,
  author =       "Matthias Felleisen and Daniel P. Friedman",
  title =        "A Reduction Semantics for Imperative Higher-Order
                 Languages",
  note =         "Parallel Architectures and Languages Europe. 259.",
  year =         "1987",
}

@Misc{FeF:1987b,
  author =       "Matthias Felleisen and Daniel P. Friedman and Eugene
                 E. Kohlbecker and Bruce F. Duba",
  title =        "A Syntactic Theory of Sequential Control",
  note =         "Theoretical Computer Science. 52.",
  year =         "1987",
}

@Misc{FeF:1987c,
  author =       "Matthias Felleisen and Daniel P. Friedman",
  title =        "A Calculus for Assignments in Higher-Order Languages",
  note =         "Conference Record of the 14th Annual ACM Symposium on
                 Principles of Programming Languages.",
  month =        jan,
  year =         "1987",
}

@Misc{FeF:1987d,
  author =       "Matthias Felleisen and Daniel P. Friedman",
  title =        "A Syntactic Theory of Sequential State",
  note =         "Indiana University. Computer Science Dept. Technical
                 Report 230.",
  month =        oct,
  year =         "1987",
}

@Article{FeH:1992a,
  author =       "Matthias Felleisen and Robert Hieb",
  title =        "{The revised report on the syntactic theories of
                 sequential control and state}",
  journal =      "Theoretical Computer Science",
  year =         "1992",
  volume =       "103",
  number =       "2",
  pages =        "235--271",
  month =        sep,
  URL =          "https://www.sciencedirect.com/science/article/pii/0304397592900147",
  doi =          "10.1016/0304-3975(92)90014-7",
}

@Misc{Fi:2002a,
  author =       "Robert Bruce Findler",
  title =        "Behavioral Software Contracts",
  note =         "PhD. Thesis. Rice University.",
  month =        may,
  year =         "2002",
}

@Misc{FiB:2004a,
  author =       "Robert Bruce Findler and Matthias Blume and Matthias
                 Felleisen",
  title =        "An Investigation of Contracts as Projections",
  note =         "University of Chicago. TR-2004-02.",
  month =        apr,
  year =         "2004",
}

@Misc{FiF:1998a,
  author =       "Robert Bruce Findler and Matthew Flatt",
  title =        "Modular Object-Oriented Programming with Units and
                 Mixins",
  note =         "Proceedings of ICFP 98.",
  year =         "1998",
}

@Misc{FiF:2002a,
  author =       "Robert Bruce Findler and Matthias Felleisen",
  title =        "Contracts for Higher-Order Functions",
  note =         "International Conference on Functional Programming
                 (ICFP2002).",
  month =        oct,
  year =         "2002",
}

@Misc{FiF:2002b,
  author =       "Robert Bruce Findler and Matthias Felleisen",
  title =        "Contracts for Higher-Order Functions",
  note =         "University of Chicago.",
  month =        oct,
  year =         "2002",
}

@Misc{Fl:2002a,
  author =       "Matthew Flatt",
  title =        "Composable and Compilable Macros: You Want it When?",
  note =         "International Conference on Functional Programming
                 (ICFP2002)",
  year =         "2002",
}

@Misc{Fl:9999a,
  author =       "Matthew Flatt",
  title =        "Programming Languages for Reusable Software
                 Components",
  note =         "PhD. Thesis. Rice University.",
}

@Misc{FlK:1998a,
  author =       "Matthew Flatt and Shriram Krishnamurthi and Matthias
                 Felleisen",
  title =        "Classes and Mixins",
  note =         "Proceedings of POPL 98.",
  year =         "1998",
}

@Misc{Fo:1991a,
  author =       "Alessandro Forin",
  title =        "Futures",
  note =         "Topics in Advanced Language Implementation.",
  year =         "1991",
}

@Misc{Fr:2003a,
  author =       "Daniel P. Friedman",
  title =        "Object-Oriented Style",
  note =         "International LISP Conference.",
  month =        oct,
  year =         "2003",
}

@Misc{FrF:1990a,
  author =       "John Franco and Daniel P. Friedman",
  title =        "Towards {A} Facility for Lexically Scoped, Dynamic
                 Mutual Recursion in Scheme",
  note =         "Journal of Computer Languages. 15. 1.",
  year =         "1990",
}

@Misc{FrF:1990b,
  author =       "John Franco and Daniel P. Friedman and Steven D.
                 Johnson",
  title =        "Multi-way Streams in Scheme",
  note =         "Journal of Computer Languages. 15. 2.",
  year =         "1990",
}

@TechReport{FrF:1992a,
  title =        "{Characterizing the Paralation Model using Dynamic
                 Assignment}",
  author =       "Eric T. Freeman and Daniel P. Friedman",
  institution =  inst-IU,
  year =         "1992",
  month =        mar,
  number =       "TR348",
  URL =          "https://legacy.cs.indiana.edu/ftp/techreports/TR348.pdf",
}

@Misc{FrR:2003a,
  author =       "Alexander Friedman and Jamie Raymond",
  title =        "{PL}o{T} Scheme",
  note =         "Scheme Workshop 2003.",
  month =        nov,
  year =         "2003",
}

@Misc{GaF:2000a,
  author =       "Steven E. Ganz and Daniel P. Friedman",
  title =        "A Modular Monadic Interpreter In Scheme With Objects",
  note =         "Indiana University Computer Science Department.
                 Technical Report 548.",
  month =        oct,
  year =         "2000",
}

@InProceedings{GeJ:1987a,
  author =       "D. Gelernter and S. Jagannathan and T. London",
  title =        "Environments as First Class Objects",
  booktitle =    proc-POPL,
  year =         "1987",
  ISBN =         "978-0-89791-215-0",
  series =       "POPL",
  pages =        "98--110",
  URL =          "https://dl.acm.org/doi/10.1145/41625.41634",
  doi =          "10.1145/41625.41634",
}

@Misc{Gh:2006a,
  author =       "Abdulaziz Ghuloum",
  title =        "An Incremental Approach to Compiler Construction",
  note =         "2006 Workshop on Scheme and Functional Programming.",
  month =        sep,
  year =         "2006",
}

@Misc{GhD:2007a,
  author =       "Abdulaziz Ghuloum and R. Kent Dybvig",
  title =        "Generation-Friendly Eq Hash Tables",
  note =         "2007 Workshop on Scheme and Functional Programming.",
  month =        sep,
  year =         "2007",
}

@Misc{GhD:2009a,
  author =       "Abdulaziz Ghuloum and R. Kent Dybvig",
  title =        "Fixing Letrec (reloaded)",
  note =         "2009 Workshop on Scheme and Functional Programming.",
  month =        aug,
  year =         "2009",
}

@Misc{GoF:2004a,
  author =       "David Goldberg and Robert Bruce Findler and Matthew
                 Flatt",
  title =        "Super and Inner - Together at Last!",
  note =         "Object-Oriented Programming, Systems, Languages, and
                 Applications (OOPSLA).",
  year =         "2004",
}

@Misc{Ha:1990a,
  author =       "Kenneth Haase",
  title =        "Soft Objects: {A} Paradigm For Object Oriented
                 Programming",
  note =         "MIT AI Lab. AIM-1014.",
  month =        mar,
  year =         "1990",
}

@Misc{Ha:1991a,
  author =       "Chris Hanson",
  title =        "A Syntactic Closures Macro Facility",
  note =         "Lisp Pointers. IV. 4.",
  month =        oct,
  year =         "1991",
}

@Misc{HeH:2008a,
  author =       "David Herman and David Van Horn",
  title =        "A few principles of macro design",
  note =         "2008 Workshop on Scheme and Functional Programming.",
  month =        sep,
  year =         "2008",
}

@Misc{HiD:1992a,
  author =       "Robert Hieb and R. Kent Dybvig and Carl Bruggeman",
  title =        "Syntactic Abstraction in Scheme",
  note =         "Computer Science Department, Indiana University.
                 TR-355.",
  month =        jun,
  year =         "1992",
}

@Article{HiD:1994a,
  author =       "Robert Hieb and R. Kent Dybvig and Claude W.
                 {Anderson, III}",
  title =        "Subcontinuations",
  journal =      "LISP and Symbolic Computation",
  year =         "1994",
  volume =       "7",
  number =       "1",
  pages =        "83--109",
  month =        jan,
  URL =          "https://link.springer.com/article/10.1007/BF01019946",
  doi =          "10.1007/BF01019946",
}

@Misc{HiF:2000a,
  author =       "Erik Hilsdale and Daniel P. Friedman",
  title =        "Writing macros in continuation-passing style",
  note =         "Scheme and Functional Programming 2000",
  month =        sep,
  year =         "2000",
}

@Misc{Hs:2010a,
  author =       "Aaron W. Hsu",
  title =        "Implementing User-level Value-weak Hashtables",
  note =         "2010 Workshop on Scheme and Functional Programming.",
  month =        aug,
  year =         "2010",
}

@Misc{Hs:2011a,
  author =       "Aaron W. Hsu",
  title =        "Hygienic Literate Programming: Lessons from
                 Chez{WEB}",
  note =         "2011 Workshop on Scheme and Functional Programming.",
  month =        oct,
  year =         "2011",
}

@Misc{IgC:2006a,
  author =       "Daniel Ignatoff and Gregory H. Cooper and Shriram
                 Krishnamurthi",
  title =        "Crossing State Lines: Adapting Object-Oriented
                 Frameworks to Functional Reactive Languages",
  note =         "Functional and Logic Programming Symposium.",
  year =         "2006",
}

@Misc{Ja:1990a,
  author =       "Suresh Jagannathan",
  title =        "Coercion as a Metaphor for Computation",
  note =         "IEEE International Conference on Computer Languages",
  month =        aug,
  year =         "1990",
}

@Misc{JaA:1992a,
  author =       "Suresh Jagannathan and Gul Agha",
  title =        "A Reflective Model of Inheritance",
  note =         "European Conference on Object-Oriented Programming
                 (ECOOP 92). LNCS 615.",
  month =        jun,
  year =         "1992",
}

@TechReport{Ke:1997a,
  author =       "Richard A. Kelsey",
  title =        "{Pre-Scheme: A Scheme Dialect for Systems
                 Programming}",
  institution =  inst-NECRI,
  year =         "1997",
  month =        jun,
  abstract =     "Pre-Scheme is a statically typed dialect of Scheme
                 that gives the programmer the efficiency and low-level
                 machine access of C while retaining many of the
                 desireble features of Scheme. The Pre-Scheme compiler
                 makes use of type inference, partial evaluation and
                 Scheme and Lisp compiler technology to compile the
                 problematic features of Scheme, such as closures, into
                 C code without significant run-time overhead. Use of
                 such features in Pre-Scheme programs is restricted to
                 those cases that can be compiled into efficient code.
                 Type reconstruction is done using a modified
                 Hindley-Milner algorithm that allows overloaded
                 user-defined functions. All top-level forms in
                 Pre-Scheme programs are evaluated at compile time,
                 which gives the user additional control over the
                 compiler's partial evaluation of a program. Pre-Scheme
                 has been implemented and used to write a byte-code
                 interpreter and associated support code for a complete
                 Scheme implementation.",
}

@Misc{Ki:2001a,
  author =       "Oleg Kiselyov",
  title =        "Re-writing abstractions, or Lambda: the ultimate
                 pattern macro",
  month =        dec,
  year =         "2001",
}

@Misc{Ki:2002a,
  author =       "Oleg Kiselyov",
  title =        "How to write seemingly unhygienic and referentially
                 opaque macros with syntax-rules",
  note =         "Workshop on Scheme and Functional Programming
                 (2002).",
  month =        oct,
  year =         "2002",
}

@Misc{Ki:2002b,
  author =       "Oleg Kiselyov",
  title =        "Macros that Compose: Systematic Macro Programming",
  note =         "Generative Programming and Component Engineering (GPCE
                 '02).",
  month =        oct,
  year =         "2002",
}

@Misc{KiG:2007a,
  author =       "Aaron Kimball and Dan Grossman",
  title =        "Software Transactions Meet First-Class Continuations",
  note =         "2007 Workshop on Scheme and Functional Programming",
  month =        sep,
  year =         "2007",
}

@Misc{Ko:1986a,
  author =       "Eugene E. Kohlbecker",
  title =        "Syntactic Extensions in the Programming Language
                 Lisp",
  note =         "PhD. Thesis. Indiana University.",
  year =         "1986",
}

@Misc{Ko:2002a,
  author =       "Donovan Kolbly",
  title =        "Extensible Language Implementation",
  note =         "PhD. Thesis. University of Texas.",
  month =        sep,
  year =         "2002",
}

@Misc{KoF:1986a,
  author =       "Eugene E. Kohlbecker and Daniel P. Friedman and
                 Matthias Felleisen and Bruce F. Duba",
  title =        "Hygienic macro expansion",
  note =         "Proceedings of the 1986 ACM Conference on LISP and
                 Functional Programming.",
  year =         "1986",
}

@Misc{KoW:1987a,
  author =       "Eugene E. Kohlbecker and Mitchell Wand",
  title =        "Macro-by-example: Deriving syntactic transformations
                 from their specifications",
  note =         "Fourteenth Annual ACM SIGACT-SIGPLAN Symposium on
                 Principles of programming languages.",
  month =        jan,
  year =         "1987",
}

@Misc{Kr:2005a,
  author =       "Shriram Krishnamurthi",
  title =        "Automata as Macros",
  note =         "Journal of Functional Programming.",
  year =         "2005",
}

@Misc{Kr:9999a,
  author =       "Shriram Krishnamurthi",
  title =        "Linguistic Reuse",
  note =         "PhD. Thesis. Rice University.",
}

@Misc{KrF:2000a,
  author =       "Shriram Krishnamurthi and Matthias Felleisen and Bruce
                 F. Duba",
  title =        "From Macros to Reusable Generative Programming",
  note =         "Rice University. TR 00-364",
  year =         "2000",
}

@Misc{KrS:1990a,
  author =       "Wolfgang Kreutzer and Malcolm Stairmand",
  title =        "{C}-Flavours: {A} Scheme-based Flavour System with
                 Co-routines and its Application to the Design of
                 Object-Oriented Software",
  note =         "Journal of Computer Languages. Vol. 15. Num. 4.",
  year =         "1990",
}

@Misc{LaF:1989a,
  author =       "Guy Lapalme and Marc Feeley",
  title =        "Micro-Scheme",
  note =         "BIGRE Bulletin. 65.",
  month =        jul,
  year =         "1989",
}

@Misc{LaF:1989b,
  author =       "Julia L. Lawall and Daniel P. Friedman",
  title =        "Embedding the Self Language in Scheme",
  note =         "BIGRE Bulletin. 65.",
  month =        jul,
  year =         "1989",
}

@Misc{LaP:1986a,
  author =       "Kevin J. Lang and Barak A. Pearlmutter",
  title =        "Oaklisp: an Object-Oriented Scheme with First Class
                 Types",
  note =         "ACM Conference on Object-Oriented Systems,
                 Programming, Languages and Applications.",
  month =        sep,
  year =         "1986",
}

@Misc{LaP:1988a,
  author =       "Kevin J. Lang and Barak A. Pearlmutter",
  title =        "Oaklisp: an Object-Oriented Dialect of Scheme",
  note =         "Lisp and Symbolic Computation: An International
                 Journal. 1. 1.",
  month =        may,
  year =         "1988",
}

@TechReport{LeF:1992a,
  title =        "{First-Class Extents}",
  author =       "Shinn-Der Lee and Daniel P. Friedman",
  institution =  inst-IU,
  year =         "1992",
  month =        aug,
  number =       "TR350",
  URL =          "https://legacy.cs.indiana.edu/ftp/techreports/TR350.pdf",
  note =         "Originally published on March 1992 and revised on
                 August 1992.",
}

@TechReport{LeF:1992b,
  title =        "{Quasi-Static Scoping: Sharing Variable Bindings
                 Across Multiple Lexical Scopes}",
  author =       "Shinn-Der Lee and Daniel P. Friedman",
  institution =  inst-IU,
  year =         "1992",
  month =        oct,
  number =       "TR365",
  URL =          "https://legacy.cs.indiana.edu/ftp/techreports/TR365.pdf",
}

@PhdThesis{Ma:1986a,
  title =        "{The Semantics of Destructive Lisp}",
  author =       "Ian Alistair Mason",
  school =       "Stanford University",
  year =         "1986",
  URL =          "https://searchworks.stanford.edu/view/1241285",
}

@Misc{Ma:1999a,
  author =       "Hidehiko Masuhara",
  title =        "Architecture Design and Compilation Techniques Using
                 Partial Evaluation in Reflective Concurrent
                 Object-Oriented Languages",
  note =         "PhD. Thesis. University of Tokyo.",
  month =        jan,
  year =         "1999",
}

@InProceedings{MaF:2005a,
  author =       "Jacob Matthews and Robert Bruce Findler",
  title =        "{An Operational Semantics for R5RS Scheme}",
  booktitle =    proc-Scheme,
  year =         "2005",
  series =       "Scheme",
  pages =        "41--54",
  URL =          "http://www.schemeworkshop.org/2005/04-matthews/04-matthews.pdf",
}

@Misc{MaK:2002a,
  author =       "Hidehiko Masuhara and Gregor Kiczales and Christopher
                 Dutchyn",
  title =        "Compilation Semantics of Aspect-Oriented Programs",
  note =         "Foundations Of Aspect-Oriented Languages (Workshop at
                 AOSD 2002).",
  month =        apr,
  year =         "2002",
}

@Misc{MaK:2003a,
  author =       "Hidehiko Masuhara and Gregor Kiczales",
  title =        "Modeling Crosscutting in Aspect-Oriented Mechanisms",
  note =         "ECOOP2003.",
  month =        jul,
  year =         "2003",
}

@Misc{MaK:2003b,
  author =       "Hidehiko Masuhara and Gregor Kiczales and Christopher
                 Dutchyn",
  title =        "A Compilation and Optimization Model for
                 Aspect-Oriented Programs",
  note =         "Compiler Construction (CC2003).",
  year =         "2003",
}

@Misc{MaY:1998a,
  author =       "Hidehiko Masuhara and Akinori Yonezawa",
  title =        "Design and Partial Evaluation of Meta-objects for a
                 Concurrent Reflective Language",
  note =         "European Conference on Object-Oriented Programming
                 (ECOOP'98).",
  month =        jul,
  year =         "1998",
}

@InProceedings{MeH:2007a,
  author =       "Patrick Meredith and Mark Hills and Grigore Rosu",
  title =        "{An Executable Rewriting Logic Semantics of
                 K-Scheme}",
  booktitle =    proc-Scheme,
  year =         "2007",
  series =       "Scheme",
  URL =          "http://www.schemeworkshop.org/2007/procPaper9.pdf",
}

@Misc{MiR:1991a,
  author =       "James S. Miller and Guillermo J. Rozas",
  title =        "Free Variables and First-Class Environments",
  note =         "Lisp and Symbolic Computation: An International
                 Journal. 3. 4.",
  year =         "1991",
}

@Misc{MIT:2002a,
  title =        "{MIT} Scheme Manual",
  note =         "Massachusetts Institute of Technology.",
  month =        mar,
  year =         "2002",
}

@Misc{Mo:1996a,
  author =       "Luc Moreau",
  title =        "A Syntactic Theory of Dynamic Binding",
  note =         "University of Southampton. Technical Report M96/4.",
  year =         "1996",
}

@Misc{Mo:1997a,
  author =       "Luc Moreau",
  title =        "A Syntactic Theory of Dynamic Binding",
  note =         "International Joint Conference on Theory and Practice
                 of Software Development (TAPSOFT/FASE '97). volume 1214
                 of Lecture Notes in Computer Science.",
  month =        apr,
  year =         "1997",
}

@Article{Mo:1998a,
  author =       "Luc Moreau",
  title =        "{A Syntactic Theory of Dynamic Binding}",
  journal =      "Higher Order Symbolic Computation",
  year =         "1998",
  volume =       "11",
  number =       "3",
  pages =        "233--279",
  month =        sep,
  URL =          "https://link.springer.com/article/10.1023/A:1010087314987",
  doi =          "10.1023/A:1010087314987",
}

@Misc{MoR:1998a,
  author =       "Luc Moreau and Daniel Ribbens and Pascal Gribomont",
  title =        "Advanced Programming Techniques Using Scheme",
  note =         "Journées Francophones des Languages Applicatifs,
                 Collection Didactique.",
  month =        feb,
  year =         "1998",
}

@Misc{MuP:1980a,
  author =       "Steven S. Muchnick and Uwe F. Pleban",
  title =        "A Semantic Comparison of Lisp and Scheme",
  note =         "Conference Record of the 1980 Lisp Conference.",
  year =         "1980",
}

@Misc{NaS:2002a,
  author =       "Akihito Nagata and Eijiro Sumii and Akinori Yonezawa",
  title =        "A Scheme-to-Java Translator with Soft Typing",
  month =        may,
  year =         "2002",
}

@Misc{Noe:1990a,
  author =       "Kurt Nørmark",
  title =        "Simulation of Object-oriented Concepts and Mechanisms
                 in Scheme",
  note =         "Aalborg University. R-90-01.",
  year =         "1990",
}

@Misc{Or:2002a,
  author =       "Doug Orleans",
  title =        "Incremental Programming with Extensible Decisions",
  note =         "Aspect-Oriented Software Development (AOSD 2002).",
  month =        apr,
  year =         "2002",
}

@Misc{Or:2002b,
  author =       "Doug Orleans",
  title =        "Incremental Programming with Extensible Decisions",
  note =         "Northeastern University. NU-CCS-02-01.",
  month =        oct,
  year =         "2002",
}

@Misc{Or:2002c,
  author =       "Doug Orleans",
  title =        "Programming Language Support For Separation Of
                 Concerns",
  note =         "Northeastern University.",
  month =        apr,
  year =         "2002",
}

@Misc{PaB:2005a,
  author =       "Alan Pavicic and Niksa Bosnic",
  title =        "{ACT} Parameterization Framework",
  note =         "2005 Workshop on Scheme and Functional Programming.",
  month =        sep,
  year =         "2005",
}

@Misc{PeL:1991a,
  author =       "Barak A. Pearlmutter and Kevin J. Lang",
  title =        "The Implementation of Oaklisp",
  note =         "Topics in Advanced Language Implementation.",
  year =         "1991",
}

@Misc{PiF:2007a,
  author =       "Adrien Piérard and Marc Feeley",
  title =        "Towards a Portable and Mobile Scheme Interpreter",
  note =         "2007 Workshop on Scheme and Functional Programming.",
  month =        sep,
  year =         "2007",
}

@Misc{Pl:1979a,
  author =       "Uwe F. Pleban",
  title =        "The Standard Semantics of a Subset of {SCHEME}, a
                 Dialect of {LISP}",
  note =         "University of Kansas. Computer Science Technical
                 Report TR-79-3.",
  month =        jul,
  year =         "1979",
}

@Misc{Pl:1980a,
  author =       "Uwe F. Pleban",
  title =        "A Denotational Approach to Flow Analysis and
                 Optimization of {SCHEME}, {A} Dialect of {LISP}",
  note =         "PhD. Thesis. Ph.D. Dissertation.",
  year =         "1980",
}

@Misc{Qu:1991a,
  author =       "Christian Queinnec",
  title =        "{MEROON}: {A} small, efficient and enhanced object
                 system",
  note =         "École Polytechnique. Technical Report LIX.RR.92.14.",
  month =        nov,
  year =         "1991",
}

@Misc{Qu:1992a,
  author =       "Christian Queinnec",
  title =        "Value transforming style",
  note =         "WSA '92--Workshop on Static Analysis",
  month =        sep,
  year =         "1992",
}

@Misc{Qu:1992b,
  author =       "Christian Queinnec",
  title =        "Value transforming style",
  note =         "Laboratoire d'Informatique de l'École Polytechnique.
                 Research Report LIX RR 92/07",
  month =        may,
  year =         "1992",
}

@Article{Qu:1993a,
  author =       "Christian Queinnec",
  title =        "{A Library of High Level Control Operators}",
  journal =      j-SIGPLAN-LISPP,
  year =         "1993",
  volume =       "VI",
  number =       "4",
  pages =        "11--26",
  month =        oct,
  URL =          "https://dl.acm.org/doi/10.1145/181889.181891",
  doi =          "10.1145/181889.181891",
}

@Misc{Qu:1993b,
  author =       "Christian Queinnec",
  title =        "Designing {MEROON} v3",
  note =         "Object-Oriented Programming in Lisp: Languages and
                 Applications.",
  month =        sep,
  year =         "1993",
}

@Misc{Qu:1998a,
  author =       "Christian Queinnec",
  title =        "Fast and compact dispatching for dynamic
                 object-oriented languages",
  note =         "Information Processing Letters. 64(6).",
  month =        jan,
  year =         "1998",
}

@Misc{QuP:1990a,
  author =       "Christian Queinnec and Julian Padget",
  title =        "A deterministic model for modules and macros",
  note =         "University of Bath. Bath Computing Group Technical
                 Report 90-36.",
  year =         "1990",
}

@Misc{QuP:1991a,
  author =       "Christian Queinnec and Julian Padget",
  title =        "Modules, macros and Lisp",
  note =         "Eleventh International Conference of the Chilean
                 Computer Science Society.",
  month =        oct,
  year =         "1991",
}

@Misc{QuP:1991b,
  author =       "Christian Queinnec and Julian Padget",
  title =        "A proposal for a modular Lisp with macros and dynamic
                 evaluation",
  note =         "Journées de Travail sur l'Analyse Statique en
                 Programmation Équationnelle, Fonctionnelle et
                 Logique.",
  month =        oct,
  year =         "1991",
}

@Article{QuW:1996a,
  author =       "Christian Queinnec and Pierre Weis",
  title =        "{Programmation applicative: État des lieux et
                 perspectives}",
  journal =      "Technique et science informatiques",
  volume =       "15",
  number =       "7",
  year =         "1996",
  URL =          "https://christian.queinnec.org/PDF/langappl.pdf",
}

@Article{Ra:1992a,
  author =       "John D. Ramsdell",
  title =        "{An Operational Semantics for Scheme}",
  journal =      j-SIGPLAN-LISPP,
  year =         "1992",
  volume =       "V",
  number =       "2",
  pages =        "6--10",
  month =        apr,
  URL =          "https://dl.acm.org/doi/10.1145/1039991.1039992",
  doi =          "10.1145/1039991.1039992",
}

@Article{Ra:1994a,
  author =       "John D. Ramsdell",
  title =        "{Scheme: The New Generation}",
  journal =      j-SIGPLAN-LISPP,
  year =         "1994",
  volume =       "VII",
  number =       "4",
  pages =        "13--14",
  month =        oct,
  URL =          "https://dl.acm.org/doi/10.1145/382109.382668",
  doi =          "10.1145/382109.382668",
}

@Misc{Re:1989a,
  author =       "Jonathan A. Rees",
  title =        "Modular Macros",
  note =         "Masters Thesis. MIT.",
  year =         "1989",
}

@Article{Re:1992a,
  author =       "Jonathan A. Rees",
  title =        "{The Scheme of Things}",
  journal =      j-SIGPLAN-LISPP,
  year =         "1992",
  volume =       "V",
  number =       "3",
  pages =        "39--46",
  month =        aug,
  URL =          "https://dl.acm.org/doi/10.1145/147135.147252",
  doi =          "10.1145/147135.147252",
}

@Misc{Re:1993a,
  author =       "Jonathan A. Rees",
  title =        "Implementing lexically scoped macros",
  note =         "Lisp Pointers. The Scheme of Things (column).",
  year =         "1993",
}

@InProceedings{ReA:1982a,
  author =       "Jonathan A. Rees and Norman I. {Adams IV}",
  title =        "{T: A Dialect of Lisp or LAMBDA: The Ultimate Software
                 Tool}",
  booktitle =    proc-LFP,
  year =         "1982",
  ISBN =         "978-0-89791-082-8",
  series =       "LFP",
  pages =        "114--122",
  URL =          "https://dl.acm.org/doi/10.1145/800068.802142",
  doi =          "10.1145/800068.802142",
}

@Manual{ReA:1984a,
  author =       "Jonathan A. Rees and Norman I. {Adams IV} and James R.
                 Meehan",
  title =        "{The T Manual}",
  organization = "Yale University Computer Science Department",
  year =         "1984",
  note =         "Unidentified",
}

@Misc{ReA:1988a,
  author =       "Jonathan A. Rees and Norman I. {Adams IV}",
  title =        "Object-oriented programming in Scheme",
  note =         "Proceedings of the 1988 ACM Conference on Lisp and
                 Functional Programming.",
  year =         "1988",
}

@InProceedings{Ro:1992a,
  author =       "Guillermo Juan Rozas",
  title =        "{Taming the Y Operator}",
  booktitle =    proc-LFP,
  year =         "1992",
  ISBN =         "978-0-89791-481-9",
  series =       "LFP",
  pages =        "226--234",
  URL =          "https://dl.acm.org/doi/10.1145/141471.141545",
  doi =          "10.1145/141471.141545",
}

@Article{Ro:1992b,
  author =       "Guillermo Juan Rozas",
  title =        "{Taming the Y Operator}",
  journal =      j-SIGPLAN-LISPP,
  year =         "1992",
  volume =       "V",
  number =       "1",
  pages =        "226--234",
  month =        jan,
  URL =          "https://dl.acm.org/doi/10.1145/141478.141545",
  doi =          "10.1145/141478.141545",
}

@Misc{RoB:1989a,
  author =       "J. C. Royer and J. P. Braquelaire and P. Casteran and
                 M. Desainte-Catherine and J. G. Penaud",
  title =        "Le modèle {OBJS}cheme: principes et applications",
  note =         "BIGRE Bulletin. 65.",
  month =        jul,
  year =         "1989",
}

@Misc{Sa:9999a,
  author =       "Amr Sabry",
  title =        "The Formal Relationship between Direct and
                 Continuation-passing Style Optimizing Compilers: {A}
                 Synthesis of Two Paradigms",
  note =         "PhD. Thesis. Rice University.",
}

# WANTED

-   Anders Bondorf and Dirk Dussart. \"Improving CPS-Based Partial Evaluation, Writing Cogen by Hand\". *Partial Evaluation and Semantics-Based Program Manipulation (PEPM\'94)*. June 1994.
-   Anders Bondorf and Jens Palsberg. \"Compiling actions by partial evaluation\". *Functional Programming and Computer Architecture (FPCA\'93)*. June 1993.
-   Anders Bondorf and Jens Palsberg. \"Generating action compilers by partial evaluation\". *Journal of Functional Programming*. 6(2). 1996.
-   Anders Bondorf and Jesper Jørgensen. \"Efficient analyses for realistic off-line partial evaluation: extended version\". University of Copenhagen. Technical Report 93/4. 1993.
-   Anders Bondorf and Jesper Jørgensen. \"Efficient analyses for realistic off-line partial evaluation\". *Journal of Functional Programming*. 3(3). July 1993.
-   Anders Bondorf and Olivier Danvy. \"Automatic Autoprojection of Recursive Equations with Global Variables and Abstract Data Types\". *Science of Computer Programming*. Vol. 16. 1991.
-   Anders Bondorf. \"A Self-Applicable Partial Evaluator for Term Rewriting Systems\". *Theory and Practice of Software Development (TAPSOFT \'89)*. March 1989.
-   Anders Bondorf. \"Automatic Autoprojection of Higher Order Recursive Equations\". *European Symposium on Programming (ESOP 1990)*. LNCS 432. May 1990.
-   Anders Bondorf. \"Automatic Autoprojection of higher order recursive equations\". *Science of Computer Programming*. volume 17. 1991.
-   Anders Bondorf. \"Compiling laziness by partial evaluation\". *Functional Programming, Glasgow 1990*. 1990.
-   Anders Bondorf. \"Improving binding times without explicit CPS-conversion\". *Proceedings of the conference on Lisp and functional programming*. June 1992.
-   Anders Bondorf. \"Self-Applicable Partial Evaluation\". PhD. Thesis. DIKU. 1990.
-   Anders Bondorf. \"Similix 5.0 Manual\". 1993.
-   Andrew A. Berlin and Daniel Weise. \"Compiling Scientific Code Using Partial Evaluation\". July 1989.
-   Andrew A. Berlin and Daniel Weise. \"Compiling Scientific Code using Partial Evaluation\". Stanford Computer Systems Laboratory. CSL-TR-90-422. March 1990.
-   Andrew A. Berlin and Henry M. Wu. \"Scheme86: A System for Interpreting Scheme\". Massachusetts Institute of Technology. AIM-1040. April 1988.
-   Andrew A. Berlin and Henry M. Wu. \"Scheme86: a system for interpreting scheme\". *Proceedings of the 1988 ACM conference on LISP and functional programming*. July 1988.
-   Andrew A. Berlin and Rajeev J. Surati. \"Exploiting the Parallelism Exposed by Partial Evaluation\". April 1993.
-   Andrew A. Berlin and Rajeev J. Surati. \"Partial Evaluation for Scientific Computing: The Supercomputer Toolkit Experience\". *Partial Evaluation and Semantics-Based Program Manipulation (PEPM\'94)*. June 1994.
-   Andrew A. Berlin and Rajeev J. Surati. \"Partial Evaluation for Scientific Computing: The Supercomputer Toolkit Experience\". May 1994.
-   Andrew A. Berlin. \"A Compilation Strategy for Numerical Programs Based on Partial Evaluation\". Masters Thesis. February 1989.
-   Andrew A. Berlin. \"Partial evaluation applied to numerical computation\". *LISP and Functional Programming (LFP 1990)*. 1990.
-   Andrew E. Ayers. \"Abstract Analysis and Optimization of Scheme\". PhD. Thesis. MIT. 1993.
-   Andrew K. Wright and Matthias Felleisen. \"A Syntactic Approach to Type Soundness\". *Information and Computation*. 1994.
-   Andrew K. Wright and Robert Cartwright. \"A Practical Soft Type System for Scheme\". *Proceedings of LFP 94*. 1994.
-   Andrew K. Wright and Robert Cartwright. \"A Practical Soft Type System for Scheme\". *Transactions on Programming Languages and Systems*. 1997.
-   Andrew K. Wright and Robert Cartwright. \"A Practical Soft Type System for Scheme\". Rice University. TR 93-218. 1993.
-   Andrew K. Wright. \"Practical Soft Typing\". PhD. Thesis. Rice University.
-   Andrew K. Wright. \"Simple Imperative Polymorphism\". *LISP and Symbolic Computation*. 1995.
-   Andrew Keep and R. Kent Dybvig. \"Enabling cross-library optimization and compile-time error checking in the presence of procedural macros\". *2010 Workshop on Scheme and Functional Programming*. August 2010.
-   Andrew W. Keep and R. Kent Dybvig. \"Ftypes: Structured foreign types\". *2011 Workshop on Scheme and Functional Programming*. October 2011.
-   Andrew W. Keep, Michael D. Adams, Lindsey Kuper, William E. Byrd and Daniel P. Friedman. \"A pattern-matcher for miniKanren -or- How to get into trouble with CPS macros\". *2009 Workshop on Scheme and Functional Programming*. August 2009.
-   Andréa Pic and Michel Briand. \"Visual Programming with Generators\". *BIGRE Bulletin*. 65. July 1989.
-   Andy Wingo. \"Applications of Fold to XML Transformation\". *2007 Workshop on Scheme and Functional Programming*. September 2007.
-   Anne Brygoo, Titou Durand, Pascal Manoury, Christian Queinnec and Michèle Soria. \"Experiment around a training engine\". *IFIP WCC 2002 - World Computer Congress*. August 2002.
-   Anne Brygoo, Titou Durand, Pascal Manoury, Christian Queinnec and Michèle Soria. \"Un cédérom pour scheme \-- chacun son entraineur, un entraineur pour tous\". *TICE 2002*. November 2002.
-   Anthony Cowley. \"Distributed Software Transactional Memory\". *2009 Workshop on Scheme and Functional Programming*. August 2009.
-   Arne J. Glenstrup. \"Implementation Notes for the Termination-Guaranteeing Binding-Time Analysis\". December 2002.
-   Arne J. Glenstrup. \"Terminator II: Stopping Partial Evaluation of Fully Recursive Programs\". Masters Thesis. DIKU, University of Copenhagen. June 1999.
-   Augustin Lux. \"Tools for Automatic Interface Generation in Scheme\". *2nd Workshop on Scheme and Functional Programming*. September 2001.
-   Barak A. Pearlmutter and Kevin J. Lang. \"The Implementation of Oaklisp\". *Topics in Advanced Language Implementation*. 1991.
-   Bernard Serpette and Manuel Serrano. \"Compiling Scheme to JVM bytecode: a performance study\". *International Conference on Functional Programming (ICFP\'2002)*. October 2002.
-   Bernd Grobauer and Julia L. Lawall. \"Partial Evaluation of Pattern Matching in Strings, revisited\". BRICS report RS-00-31. September 2001.
-   Bernd Grobauer. \"Topics in Semantics-based Program Manipulation\". PhD. Thesis. University of Aarhus. July 2001.
-   Bjarne Steensgaard and Morten Marquard. \"A Polyvariant Closure Analysis with Dynamic Widening\". May 1994.
-   Bradley J. Lucier. \"Numerical partial differential equations in Scheme\". *Scheme and Functional Programming 2000*. September 2000.
-   Brent W. Benson, Jr.. \"libscheme: Scheme as a C Library\". *Proceedings of the 1994 USENIX Symposium on Very High Level Languages*. 1994.
-   Brian Beckman. \"A Scheme for Interactive Graphics\". Computer Graphics Laboratory, NASA JPL. July 1990.
-   Brian Beckman. \"A Scheme for Little Languages in Interactive Graphics\". *Software-Practice and Experience*. 21. 2. Feb 1991.
-   Brian Cantwell Smith and Jim des Rivières. \"Interim 3-LISP Reference Manual\". Xerox PARC. 1984.
-   Brian Cantwell Smith. \"Reflection and Semantics in a Procedural Language\". PhD. Thesis. Massachusetts Institute of Technology. MIT-LCS-TR-272. January 1982.
-   Brian Cantwell Smith. \"Reflection and semantics in LISP\". *Principles of programming languages (POPL84)*. January 1984.
-   Brian D. Carlstrom. \"Embedding Scheme in Java\". PhD. Thesis. Massachusetts Institute of Technlogy. February 2001.
-   Bruce R. Lewis. \"BRL: A database-oriented language to embed in HTML and other markup\". June 2001.
-   Carl Bruggeman, Oscar Waddell and R. Kent Dybvig. \"Representing Control in the Presence of One-Shot Continuations\". *ACM SIGPLAN 1996 Conference on Programming Language Design and Implementation*. June 1996.
-   Carl Dionne, Marc Feeley, Jocelyn Desbiens. \"A Taxonomy of Distributed Debuggers Based on Execution Replay\". *International Conference on Parallel and Distributed Processing Techniques*. August 1996.
-   Carsten Hellegaard. \"POWER - Program Oriented Web EngineeRing\". Masters Thesis. Aalborg University. June 2000.
-   Carsten K. Gomard and Neil D. Jones. \"A Partial Evaluator for the Untyped Lambda Calculus\". DIKU. D-15. January 1991.
-   Carsten K. Gomard and Neil D. Jones. \"Partial evaluation of lambda calculus\". *1998 DIKU International Summerschool*. LNCS 1706. 1999.
-   Casey Klein and Robert Bruce Findler. \"Randomized Testing in PLT Redex\". *2009 Workshop on Scheme and Functional Programming*. August 2009.
-   Charles Consel and Olivier Danvy. \"For a Better Support of Static Data Flow\". *Functional Programming and Computer Architecture (FPCS\'91)*. 1991.
-   Charles Consel and Olivier Danvy. \"From Interpreting to Compiling Binding Times\". *European Symposium on Programming (ESOP 1990)*. LNCS 432. May 1990.
-   Charles Consel and Olivier Danvy. \"Partial Evaluation in Parallel\". *Lisp and Symbolic Computation*. Volume 5. Issue 4. 1992.
-   Charles Consel and Olivier Danvy. \"Partial Evaluation of Pattern Matching in Strings\". *Information Processing Letters*. Vol. 30. No. 2. January 1989.
-   Charles Consel and Olivier Danvy. \"Partial Evaluation: Principles and Perspectives\". *Journees Francophones des Langages Applicatifs*. February 1993.
-   Charles Consel and Olivier Danvy. \"Static and Dynamic Semantics Processing\". *Principles of Programming Languages (POPL\'91)*. January 1991.
-   Charles Consel and Olivier Danvy. \"Tutorial Notes on Partial Evaluation\". *Principles of Programming Languages (POPL\'93)*. January 1993.
-   Charles Consel and Siau Cheng Khoo. \"On-line and Off-line Partial Evaluation: Semantic Specifications and Correctness Proofs\". Yale University. 1993.
-   Charles Consel and Siau Cheng Khoo. \"Semantics-directed generation of a Prolog compiler\". *Science of Computer Programming*. volume 21. 1993.
-   Charles Consel. \"A tour of Schism: a partial evaluation system for higher-order applicative languages\". *ACM Symposium on Partial Evaluation and Semantics-Based Program Manipulation (PEPM \'93)*. June 1993.
-   Charles Consel. \"Analyse de Programmes, Evaluation Partielle et Génération de Compilateurs\". PhD. Thesis. Université de Paris VI. 1989.
-   Charles Consel. \"New Insights into Partial Evaluation: the SCHISM Experiment\". *2nd European Symposium on Programming (ESOP \'88)*. March 1988.
-   Charles Consel. \"Polyvariant binding-time analysis for higher-order, applicative languages\". *ACM Symposium on Partial Evaluation and Semantics-Based Program Manipulation (PEPM \'93)*. June 1993.
-   Charles Consel. \"Report on Schism (Manual)\". IRISA/University of Rennes I. January 1996.
-   Ching-Lin Wang. \"A Continuation-based Language Embedded in Scheme\". *Journal of Computer Languages*. Vol. 17. Num. 1. 1992.
-   Ching-Lin Wang. \"Obtaining Lazy Evaluation with Continuations in Scheme\". *Information Processing Letters*. Vol. 35. 1990.
-   Chongkai Zhu. \"The Marriage of MrMathematica and MzScheme\". *2005 Workshop on Scheme and Functional Programming*. September 2005.
-   Chris Hanson. \"Efficient Stack Allocation for Tail-Recursive Languages\". *Proceedings of the 1990 ACM Conference on Lisp and Functional Programming*. June 1990.
-   Christian Mossin. \"Partial evaluation of General Parsers\". *Partial Evaluation and Semantics Based Program Manipulation (PEPM\'93)*. June 1993.
-   Christian Mossin. \"Partial evaluation of general parsers\". *Proceedings of the ACM SIGPLAN symposium on Partial evaluation and semantics-based program manipulation (PEPM\'93)*. 1993.
-   Christian Mossin. \"Polymorphic Binding Time Analysis\". Masters Thesis. DIKU, University of Copenhagen. July 1993.
-   Christian Mossin. \"Similix Binding Time Debugger Manual, system version 4.0\". September 1991.
-   Christian Queinnec and Bernard Serpette. \"A Dynamic Extent Control Operator for Partial Continuations\". *POPL \'91 - Eighteenth Annual ACM symposium on Principles of Programming Languages*. January 1991.
-   Christian Queinnec and David DeRoure. \"Design of a concurrent and distributed language\". *Parallel Symbolic Computing: Languages, Systems, and Applications, (US/Japan Workshop Proceedings)*. Lecture Notes in Computer Science 748. October 1993.
-   Christian Queinnec and David DeRoure. \"Sharing code through first-class environments\". *Proceedings of ICFP\'96 International Conference on Functional Programming*. May 1996.
-   Christian Queinnec and Jean-Marie Geffroy. \"Partial evaluation applied to symbolic pattern matching with intelligent backtrack\". *WSA \'92\--Workshop on Static Analysis*. September 1992.
-   Christian Queinnec and Julian Padget. \"A deterministic model for modules and macros\". University of Bath. Bath Computing Group Technical Report 90-36. 1990.
-   Christian Queinnec and Julian Padget. \"A proposal for a modular Lisp with macros and dynamic evaluation\". *Journées de Travail sur l\'Analyse Statique en Programmation Équationnelle, Fonctionnelle et Logique*. October 1991.
-   Christian Queinnec and Julian Padget. \"Modules, macros and Lisp\". *Eleventh International Conference of the Chilean Computer Science Society*. October 1991.
-   Christian Queinnec. \"23 things I know about modules for Scheme\". *Workshop on Scheme and Functional Programming (2002)*. October 2002.
-   Christian Queinnec. \"A concurrent and distributed extension to scheme\". *PARLE \'92 - Parallel Architectures and Languages Europe*. Lecture Notes in Computer Science 605. June 1992.
-   Christian Queinnec. \"A library for quizzes\". *Workshop on Scheme and Functional Programming (2002)*. October 2002.
-   Christian Queinnec. \"A library of high-level control operators\". *Lisp Pointers*. 6(4). October 1993.
-   Christian Queinnec. \"Bribes de DMeroon\". *Actes des journées de recherche sur la Mémoire Partagée Répartie*. MPR 96. May 1996.
-   Christian Queinnec. \"Compilation of Non-Linear, Second Order Patterns on S-Expressions\". *International Workshop PLILP \'90 - Programming Language: Implementation and Logic Programming*. Lecture Notes in Computer Science 456. August 1990.
-   Christian Queinnec. \"Continuation conscious compilation\". *Lisp Pointers*. 6(1). January 1993.
-   Christian Queinnec. \"Continuation sensitive compilation\". Laboratoire d\'Informatique de l\'École Polytechnique. Research Report LIX RR 92/14. November 1992.
-   Christian Queinnec. \"Continuations and conversations\". *9th International Conference, AIMSA 2000*. number 1904 in Lecture Notes in Artificial Intelligence. September 2000.
-   Christian Queinnec. \"Crystal Scheme, A Language for Massively Parallel Machines\". *Second Symposium on High Performance Computing*. October 1991.
-   Christian Queinnec. \"DMeroon : Overview of a distributed class-based causally-coherent data model\". *PSLS 95 - Parallel Symbolic Langages and Systems*. Lecture Notes in Computer Science 1068. October 1995.
-   Christian Queinnec. \"DMeroon A Distributed Class-based Causally-Coherent Data Model - General documentation\". Rapport LIP6 1998/039. 1998.
-   Christian Queinnec. \"Distributed generic functions\". *Object-Oriented Parallel and Distributed Programming*. 2000.
-   Christian Queinnec. \"Distributed generic functions\". *Second France-Japan workshop on Object-Based Parallel and Distributed Computing \-- OBPDC \'97*. October 1997.
-   Christian Queinnec. \"Inverting back the inversion of control or, continuations versus page-centric programming\". Technical Report 7, LIP6. May 2001.
-   Christian Queinnec. \"Literate programming from scheme to TEX\". Laboratoire d\'Informatique de l\'École Polytechnique. Research Report LIX RR 93.05. November 1993.
-   Christian Queinnec. \"Locality, causality and continuations\". *LFP \'94 - ACM Symposium on Lisp and Functional Programming*. June 1994.
-   Christian Queinnec. \"Macroexpansion reflective tower\". *Proceedings of the Reflection\'96 Conference*. April 1996.
-   Christian Queinnec. \"Marshaling/unmarshaling as a compilation/interpretation process\". *Symposium IPPS/SPDP 1999 - 13th International Parallel Processing Symposium and 10th Symposium on Parallel and Distributed Processing*. April 1999.
-   Christian Queinnec. \"Marshaling/unmarshaling as a compilation/interpretation process\". Research Report LIP6/1998/049, LIP6. December 1998.
-   Christian Queinnec. \"PolyScheme : A Semantics for a Concurrent Scheme\". *Workshop on High Performance and Parallel Computing in Lisp*. November 1990.
-   Christian Queinnec. \"Sharing mutable objects and controlling groups of tasks in a concurrent and distributed language\". *Proceedings of the Workshop on Theory and Practice of Parallel Programming (TPPP\'94)*. Lecture Notes in Computer Science 907. November 1994.
-   Christian Queinnec. \"Struggle, The First Denotational Game\". *EuroPal \'90 - European Conference on Lisp and its Practical Applications*. March 1990.
-   Christian Queinnec. \"Sérialisation-désérialisation en DMeroon\". *NOTERE97 \-- Colloque international sur les NOuvelles TEchnologies de la RÉpartition*. November 1997.
-   Christian Queinnec. \"The influence of browsers on evaluators or, continuations to program web servers\". *ICFP \'2000 - International Conference on Functional Programming*. September 2000.
-   Christian Queinnec. \"Validation Suite Generation\". *Revue Bigre+Globule*. (65). July 1989.
-   Christopher Earl, Matthew Might and David Van Horn. \"Pushdown Control-Flow Analysis of Higher-Order Programs\". *2010 Workshop on Scheme and Functional Programming*. August 2010.
-   Christopher T. Haynes and Daniel P. Friedman. \"Abstracting Timed Preemption with Engines\". *Journal of Computer Languages*. 12. 2. 1987.
-   Christopher T. Haynes and Daniel P. Friedman. \"Embedding Continuations in Procedural Objects\". *ACM Transactions on Programming Languages and Systems*. 9. 4. October 1987.
-   Christopher T. Haynes and Daniel P. Friedman. \"Engines Build Process Abstractions\". *Conference Record of the 1984 ACM Symposium on Lisp and Functional Programming*. 1984.
-   Christopher T. Haynes, Daniel P. Friedman and Mitchell Wand. \"Continuations and Coroutines\". *Conference Record of the 1984 ACM Symposium on Lisp and Functional Programming*. 1984.
-   Christopher T. Haynes, Daniel P. Friedman and Mitchell Wand. \"Obtaining Coroutines With Continuations\". *Journal of Computer Languages*. 11. 3/4. 1986.
-   Christopher T. Haynes. \"Logic Continuations\". *Journal of Logic Programming*. Vol. 4. 1987.
-   Christopher T. Haynes. \"Logic Continuations\". *Proceedings of the Third International Conference on Logic Programming*. July 1986.
-   Chung-chieh Shan. \"Shift to Control\". *2004 Scheme Workshop*. September 2004.
-   Claire E. Alvis, Jeremiah J. Willcock, Kyle M. Carter, William E. Byrd and Daniel P. Friedman. \"cKanren: miniKanren with Constraints\". *2011 Workshop on Scheme and Functional Programming*. October 2011.
-   Cormac Flanagan and Matthias Felleisen. \"A New Way of Debugging LISP Programs\". *Proceedings of LUGM 98*. 1998.
-   Cormac Flanagan and Matthias Felleisen. \"Componential Set-Based Analysis\". *Proceedings of PLDI 97*. 1996.
-   Cormac Flanagan and Matthias Felleisen. \"Componential Set-Based Analysis\". *Transactions on Programming Languages and Systems*. 1999.
-   Cormac Flanagan and Matthias Felleisen. \"Modular and Polymorphic Set-Based Analysis: Theory and Practice\". Rice University. TR 96-266. 1996.
-   Cormac Flanagan and Matthias Felleisen. \"Set-Based Analysis for Full Scheme and Its Use in Soft-Typing\". Rice University. TR 95-254. 1995.
-   Cormac Flanagan and Matthias Felleisen. \"The Semantics of Future and Its Use in Program Optimizations\". *Proceedings of POPL 95*. 1995.
-   Cormac Flanagan and Matthias Felleisen. \"The Semantics of Futures\". Rice University. TR 94-238. 1994.
-   Cormac Flanagan and Matthias Felleisen. \"Well-Founded Touch Optimization for Futures\". Rice University. TR 94-239. 1994.
-   Cormac Flanagan, Amr Sabry, Bruce F. Duba and Matthias Felleisen. \"The Essence of Compiling with Continuations\". *Proceedings of PLDI 93*. 1993.
-   Cormac Flanagan, Matthew Flatt, Shriram Krishnamurthi, Stephanie Weirich and Matthias Felleisen. \"Catching Bugs in the Web of Program Invariants\". *Proceedings of PLDI 96*. 1996.
-   Cormac Flanagan. \"Effective Static Debugging via Componential Set-Based Analysis\". PhD. Thesis. Rice University.
-   Damien Ciabrini and Manuel Serrano. \"Bugloo: A Source Level Debugger for Scheme Programs Compiled into JVM Bytecode\". *3th International Lisp Conference*. October 2003.
-   Damien Ciabrini. \"Debugging Scheme Fair Threads\". *2004 Scheme Workshop*. September 2004.
-   Dan Teodosiu. \"HARE: A Compiler for Scheme\". Masters Thesis. Master\'s Thesis. June 1990.
-   Dan Teodosiu. \"HARE: An Optimizing Portable Compiler for Scheme\". *ACM Sigplan Notices*. 26. 1. Jan 1991.
-   Daniel Ignatoff, Gregory H. Cooper and Shriram Krishnamurthi. \"Crossing State Lines: Adapting Object-Oriented Frameworks to Functional Reactive Languages\". *Functional and Logic Programming Symposium*. 2006.
-   Daniel P. Friedman and Christopher T. Haynes. \"Constraining Control\". *Proceedings of the Twelfth Annual Symposium on Principles of Programming Languages*. January 1985.
-   Daniel P. Friedman and Mitchell Wand. \"Reification: Reflection Without Metaphysics\". *Conference Record of the 1984 ACM Symposium on LISP and Functional Programming*. August 1984.
-   Daniel P. Friedman and Oleg Kiselyov. \"A Logic System with First-Class Relations\". May 2004.
-   Daniel P. Friedman, Christopher T. Haynes and Eugene E. Kohlbecker. \"Programming with Continuations\". *Program Transformation and Programming Environments*. 1984.
-   Daniel P. Friedman. \"Applications of Continuations: Invited Tutorial\". *1988 Principles of Programming Languages (POPL88)*. January 1988.
-   Daniel P. Friedman. \"Direct Style from Monadic Style and Back\". 2002.
-   Daniel P. Friedman. \"From Direct Style to Monadic Style through Continuation-Passing Style\". 2002.
-   Daniel Weise and Erik Ruf. \"Computing Types During Program Specialization\". Stanford Computer Systems Laboratory. December 1990.
-   Daniel Weise and Erik Ruf. \"Computing Types During Program Specialization\". Stanford University. CSL-TR-90-441. October 1990.
-   Daniel Weise, Roland Conybeare, Erik Ruf and Scott Seligman. \"Automatic Online Partial Evaluation\". *Proceedings of the Conference on Functional Programming Languages and Computer Architecture, 1991*. June 1991.
-   Daniel Weise. \"Graphs as an Intermediate Representation for Partial Evaluation\". Stanford University. CSL-TR-90-421. March 1990.
-   Danius Michaelides, Luc Moreau and David DeRoure. \"A Uniform Approach to Programming the World Wide Web\". *Computer Systems Science and Engineering*. 14(2):69-91. 1999.
-   Danny Dubé and Anass Kadiri. \"Automatic construction of parse trees for lexemes\". *2006 Workshop on Scheme and Functional Programming*. September 2006.
-   Danny Dubé and Marc Feeley. \"A Demand-Driven Adaptive Type Analysis\". *International Conference on Functional Programming (ICFP\'2002)*. October 2002.
-   Danny Dubé, Marc Feeley, Manuel Serrano. \"Un GC temps réel semi-compactant\". *Journées Francophones des Langages Applicatifs*. January 1996.
-   Danny Dubé, Marc Feeley. \"Demand-Driven Type Analysis: an Introduction\". *2nd Workshop on Scheme and Functional Programming*. September 2001.
-   Danny Dubé. \"BIT: A very compact Scheme system for embedded applications\". *Scheme and Functional Programming 2000*. September 2000.
-   Danny Dubé. \"Demand-driven type analysis for dynamically-typed functional languages\". PhD. Thesis. Université de Montréal. August 2002.
-   Darius Bacon. \"A Hacker\'s Introduction to Partial Evaluation\". *The Lisp Magazine at lisp-p.org*. August 2002.
-   Darrell Ferguson and Dwight Deugo. \"Call with Current Continuation Patterns\". *8th Conference on Pattern Languages of Programs*. September 2001.
-   David A. Kranz, Richard A. Kelsey, Jonathan A. Rees, Paul Hudak and James Philbin. \"ORBIT: an optimizing compiler for scheme\". *Proceedings of the SIGPLAN symposium on Compiler contruction*. June 1986.
-   David A. Kranz, Robert H. Halstead and Eric Mohr. \"Mul-T: a high-performance parallel Lisp\". *Programming language design and implementation 1989*. 1989.
-   David A. Kranz. \"ORBIT: An Optimizing Compiler for Scheme\". PhD. Thesis. Yale. 1988.
-   David Espinosa. \"Building Interpreters by Transforming Stratified Monads\". Department of Computer Science, Columbia University. April 1994.
-   David Espinosa. \"Language Extensibility via First-class Interpreters and Constructive Modules\". Department of Computer Science, Columbia University. April 1993.
-   David Espinosa. \"Semantic Lego\". Department of Computer Science, Columbia University. January 1994.
-   David Espinosa. \"Semantic Lego\". PhD. Thesis. 1995.
-   David Gudeman. \"Representing Type Information in Dynamically Typed Languages\". University of Arizona. TR 93-27. October 1993.
-   David H. Bartley and John C. Jensen. \"The implementation of PC Scheme\". *Proceedings of the 1986 ACM conference on LISP and functional programming*. 1986.
-   David Herman and Philippe Meunier. \"Improving the Static Analysis of Embedded Languages via Partial Evaluation\". *International Conference on Functional Programming (ICFP2004)*. September 2004.
-   Dino P. Oliva and Mitchell Wand. \"A Verifed Compiler for Pure PreScheme\". MITRE Corporation. September 1991.
-   Dino P. Oliva and Mitchell Wand. \"A Verifed Run-Time Structure for Pure PreScheme\". MITRE Corporation. September 1992.
-   Dino P. Oliva, John D. Ramsdell and Mitchell Wand. \"The VLISP Verified PreScheme Compiler\". *Lisp and Symbolic Computation*. Vol. 8 No. 1/2. 1995.
-   Dipanwita Sarkar, Oscar Waddell and R. Kent Dybvig. \"A Nanopass Infrastructure for Compiler Education\". *International Conference on Functional Programming 2004 (ICFP2004)*. September 2004.
-   Dominique Boucher, Marc Feeley. \"Abstract Compilation: a New Implementation Paradigm for Static Analysis\". *Compiler Construction Conference*. April 1996.
-   Dominique Boucher, Marc Feeley. \"Construction parallèle de l\'automate LR(0): Une application de Multilisp à la compilation\". *Actes des 6ème Rencontres Francophones du Parallélisme*. Juin 1994.
-   Dominique Boucher, Marc Feeley. \"Un système pour l\'optimisation globale de programmes d\'ordre supérieur par compilation abstraite séparée\". département d\'informatique et r.o., Université de Montréal. Rapport technique 992. Septembre 1995.
-   Dominique Boucher. \"Analyse et optimisation globales de modules compilés séparément\". PhD. Thesis. Université de Montréal. December 1999.
-   Dominique Boucher. \"GOld: a link-time optimizer for Scheme\". *Scheme and Functional Programming 2000*. September 2000.
-   Dorai Sitaram and Matthias Felleisen. \"Control Delimiters and Their Hierarchies\". *Lisp and Symbolic Computation: An International Journal*. 3. 1. January 1990.
-   Dorai Sitaram and Matthias Felleisen. \"Modeling Continuations Without Continuations\". *Proceedings of the Eighteenth ACM Symposium on Principles of Programming Languages*. 1991.
-   Dorai Sitaram and Matthias Felleisen. \"Reasoning with Continuations II: Full Abstraction for Models of Control\". *Proceedings of LFP 90*. 1990.
-   Dorai Sitaram. \"Porting Scheme Programs\". *Scheme Workshop 2003*. November 2003.
-   Dorai Sitaram. \"Unwind-protect in portable Scheme\". *Scheme Workshop 2003*. November 2003.
-   Drew McDermott. \"An Efficient Environment Allocation Scheme in an Interpreter for a Lexically-Scoped Lisp\". *Conference Record of the 1980 Lisp Conference*. 1980.
-   Eijiro Sumii and Naoki Kobayashi. \"A Hybrid Approach to Online and Offline Partial Evaluation\". *Higher-Order and Symbolic Computation*. Vol. 14. No. 2/3. September 2001.
-   Eijiro Sumii and Naoki Kobayashi. \"Online Type-Directed Partial Evaluation for Dynamically-Typed Languages\". *Computer Software*. Vol. 17. No. 3. May 2000.
-   Eijiro Sumii and Naoki Kobayashi. \"Online-and-Offline Partial Evaluation: A Mixed Approach\". *Partial Evaluation and Semantics-Based Program Manipulation (PEPM\'00)*. January 2000.
-   Eijiro Sumii. \"A Hybrid Approach To Online And Offline Partial Evaluation\". Masters Thesis. University of Tokyo. February 2000.
-   Eijiro Sumii. \"An implementation of transparent migration on standard Scheme\". *Scheme and Functional Programming 2000*. September 2000.
-   Eli Barzilay and Dmitry Orlovsky. \"Foreign Interface for PLT Scheme\". *2004 Scheme Workshop*. September 2004.
-   Eli Barzilay. \"A Self-Hosting Evaluator using HOAS\". *2006 Workshop on Scheme and Functional Programming*. September 2006.
-   Eli Barzilay. \"The Scribble Reader: An Alternative to S-expressions for Textual Content\". *2009 Workshop on Scheme and Functional Programming*. August 2009.
-   Eric Mohr, David A. Kranz and Robert H. Halstead. \"Lazy task creation: a technique for increasing the granularity of parallel programs\". *Proceedings of the 1990 ACM conference on LISP and functional programming*. 1990.
-   Erick Gallesio and Manuel Serrano. \"Biglook: a Widget Library for the Scheme Programming Language\". *2002 Usenix annual technical conference*. June 2002.
-   Erick Gallesio and Manuel Serrano. \"Programming Graphical User Interfaces with Scheme\". *Journal of Functional Programming*. Vol. 13, No. 5. September 2003.
-   Erick Gallesio and Manuel Serrano. \"Ubiquitous Mails\". *2005 Workshop on Scheme and Functional Programming*. September 2005.
-   Erik Hilsdale and Daniel P. Friedman. \"Writing macros in continuation-passing style\". *Scheme and Functional Programming 2000*. September 2000.
-   Erik Hilsdale, J. Michael Ashley, R. Kent Dybvig and Daniel P. Friedman. \"Compiler Construction Using Scheme\". *First International Symposium, Functional Programming Languages in Education*. 1995.
-   Erik Ruf and Daniel Weise. \"Avoiding Redundant Specialization During Partial Evaluation\". Stanford Computer Systems Laboratory. CSL-TR-92-518. April 1992.
-   Erik Ruf and Daniel Weise. \"Improving the Accuracy of Higher-Order Specialization using Control Flow Analysis\". *1992 ACM SIGPLAN Workshop on Partial Evaluation and Semantics-Directed Program Manipulation, pp. 67-74, San Francisco, June, 1992*. June 1992.
-   Erik Ruf and Daniel Weise. \"LogScheme: Integrating Logic Programming into Scheme\". *LISP and Symbolic Computation*. 3(3). September 1990.
-   Erik Ruf and Daniel Weise. \"Nondeterminism and unification in LogScheme: integrating logic and functional programming\". *Proceedings of the fourth international conference on Functional programming languages and computer architecture*. September 1989.
-   Erik Ruf and Daniel Weise. \"On the Specialization of Online Program Specializers\". Stanford Computer Systems Laboratory. CSL-TR-92-534. July 1992.
-   Erik Ruf and Daniel Weise. \"Opportunities for Online Partial Evaluation\". Stanford Computer Systems Laboratory. CSL-TR-92-516. April 1992.
-   Erik Ruf and Daniel Weise. \"Preserving Information During Online Partial Evaluation\". Stanford University. CSL-TR-92-517. April 1992.
-   Erik Ruf and Daniel Weise. \"Using Types to Avoid Redundant Specialization\". *Partial Evaluation and Semantics-Directed Program Manipulation, PEPM\'91*. June 1991.
-   Erik Ruf. \"Partial Evaluation in Reflective System Implementations\". *OOPSLA\'93 Workshop on Reflection and Metalevel Architecture*. October 1993.
-   Erik Ruf. \"Topics in Online Partial Evaluation\". PhD. Thesis. March 1993.
-   Felix S. Klock II. \"The layers of Larceny\'s foreign function interface\". *2008 Workshop on Scheme and Functional Programming*. September 2008.
-   Florian Loitsch. \"Javascript to Scheme Compilation\". *2005 Workshop on Scheme and Functional Programming*. September 2005.
-   Fred Bayer. \"LispMe: An Implementation of Scheme for the PalmPilot\". *2nd Workshop on Scheme and Functional Programming*. September 2001.
-   Fritz Henglein and Jakob Rehof. \"Safe polymorphic type inference for a Dynamically Typed Language: Translating Scheme to ML\". *ACM Conference on Functional Programming Languages and Computer Architecture (FPCA\'95)*. 1995.
-   Fritz Henglein. \"Global Tagging Optimization by Type Inference\". *Proceedings of the 1992 ACM Conference on Lisp and Functional Programming*. June 1992.
-   Frédéric Peschanski, Christian Queinnec and Jean-Pierre Briot. \"A typeful composition model for dynamic software architectures\". July 2001.
-   Frédéric Peschanski. \"Jargons: Experimenting Composable Domain-Specific Languages\". *2nd Workshop on Scheme and Functional Programming*. September 2001.
-   Gerald Jay Sussman, Jack Holloway, Guy Lewis Steele, Jr. and Alan Bell. \"Scheme-79 - Lisp on a Chip\". *IEEE Computer*. 14. 7. July 1981.
-   Gerald Jay Sussman, Jack Holloway, Guy Lewis Steele, Jr. and Alan Bell. \"The Scheme-79 Chip\". MIT AI Laboratory. AI Memo 559. January 1980.
-   Greg Pettyjohn, John Clements, Joe Marshall, Shriram Krishnamurthi and Matthias Felleisen. \"Continuations from Generalized Stack Inspection\". *International Conference on Functional Programming, ICFP 2005*. September 2005.
-   Gregory H. Cooper and Shriram Krishnamurthi. \"FrTime: Functional Reactive Programming in PLT Scheme\". April 2004.
-   Guillaume Cartier and Louis-Julien Guillemette. \"JazzScheme: Evolution of a Lisp-Based Development System\". *2010 Workshop on Scheme and Functional Programming*. August 2010.
-   Guillaume Germain, Marc Feeley and Stefan Monnier. \"Concurrency Oriented Programming in Termite Scheme\". *2006 Workshop on Scheme and Functional Programming*. September 2006.
-   Guillaume Marceau and Gregory H. Cooper and Shriram Krishnamurthi and Steven P. Reiss. \"A Dataflow Language for Scriptable Debugging\". *IEEE International Symposium on Automated Software Engineering (ASE2004)*. September 2004.
-   Guillaume Marceau, Gregory H. Cooper, Jonathan P. Spiro, Shriram Krishnamurthi and Steven P. Reiss. \"The Design and Implementation of a Dataflow Language for Scriptable Debugging\". *Automated Software Engineering Journal, 2006*. 2006.
-   Guillaume Marceau, Kathi Fisler and Shriram Krishnamurthi. \"Measuring the Effectiveness of Error Messages Designed for Novice Programmers\". *2010 Workshop on Scheme and Functional Programming*. August 2010.
-   Guillermo J. Rozas. \"A Computational Model for Observation in Quantum Mechanics\". Masters Thesis. Massachusetts Institute of Technology. AITR-925. March 1987.
-   Guillermo J. Rozas. \"Liar, an Algol-like Compiler for Scheme\". Massachusetts Institute of Technology. S. B. Thesis. January 1984.
-   Guillermo J. Rozas. \"Translucent Procedures, Abstraction Without Opacity\". MIT AI Lab. AITR-1427. October 1993.
-   Guruduth S. Banavar. \"An Application Framework For Compositional Modularity\". PhD. Thesis. University of Utah. 1995.
-   Guy Lewis Steele and Jon L. White. \"How to print floating-point numbers accurately\". *Proceedings of the conference on Programming language design and implementation*. June 1990.
-   Guy Lewis Steele, Jr. and Gerald Jay Sussman. \"Design of LISP-based Processors, or SCHEME: A Dielectric LISP, or Finite Memories Considered Harmful, or LAMBDA: The Ultimate Opcode\". MIT AI Lab. AI Lab Memo AIM-514. March 1979.
-   Guy Lewis Steele, Jr. and Gerald Jay Sussman. \"Design of a Lisp-based Processor\". *CACM*. 23. 11. November 1980.
-   Guy Lewis Steele, Jr. and Gerald Jay Sussman. \"The Art of the Interpreter of, the Modularity Complex (Parts Zero, One, and Two)\". MIT AI Lab. AI Lab Memo AIM-453. May 1978.
-   Guy Lewis Steele, Jr. and Gerald Jay Sussman. \"The Dream of a Lifetime: a Lazy Variable Extent Mechanism\". *Conference Record of the 1980 Lisp Conference*. 1980.
-   Guy Lewis Steele, Jr. and Gerald Jay Sussman. \"The Dream of a Lifetime: a Lazy Variable Extent Mechanism\". 1979.
-   Guy Lewis Steele, Jr.. \"Compiler Optimization Based on Viewing LAMBDA as RENAME + GOTO\". *AI: An MIT Perspective*. 1980.
-   Guy Lewis Steele, Jr.. \"Debunking the \"Expensive Procedure Call\" Myth, or Procedure Call Implementations Considered Harmful, or LAMBDA, the Ultimate GOTO\". *ACM Conference Proceedings*. 1977.
-   Guy Lewis Steele, Jr.. \"Macaroni is Better than Spaghetti\". *Proceedings of the Symposium on Artificial Intelligence and Programming Languages*. August 1977.
-   Guy Lewis Steele, Jr.. \"RABBIT: A Compiler for SCHEME\". Masters Thesis. MIT AI Lab. AI Lab Technical Report AITR-474. May 1978.
-   Hal Abelson and Gerald Jay Sussman. \"LISP: A Language for Stratified Design\". MIT AI Lab. AI Lab Memo AIM-986. August 1987.
-   Hal Abelson and Gerald Jay Sussman. \"Lisp: A Language for Stratified Design\". *BYTE*. February 1988.
-   Hari Prashanth and Sam Tobin-Hochstadt. \"Functional Data Structures for Typed Racket\". *2010 Workshop on Scheme and Functional Programming*. August 2010.
-   Henry G. Baker. \"CONS Should Not CONS Its Arguments, Part II: Cheney on the M.T.A.\". May 1994.
-   Henry M. Wu. \"Performance Evaluation of the Scheme 86 and HP Precision Architecture\". Masters Thesis. Massachusetts Institute of Technology. AITR-1103. April 1989.
-   Henry M. Wu. \"Scheme 86: An Architecture for Microcoding a Scheme Interpreter\". Massachusetts Institute of Technology. AIM-953. August 1988.
-   Hidehiko Masuhara and Akinori Yonezawa. \"Design and Partial Evaluation of Meta-objects for a Concurrent Reflective Language\". *European Conference on Object-Oriented Programming (ECOOP\'98)*. July 1998.
-   Hidehiko Masuhara, Gregor Kiczales and Christopher Dutchyn. \"A Compilation and Optimization Model for Aspect-Oriented Programs\". *Compiler Construction (CC2003)*. 2003.
-   Hidehiko Masuhara, Gregor Kiczales and Christopher Dutchyn. \"Compilation Semantics of Aspect-Oriented Programs\". *Foundations Of Aspect-Oriented Languages (Workshop at AOSD 2002)*. April 2002.
-   Hidehiko Masuhara. \"Architecture Design and Compilation Techniques Using Partial Evaluation in Reflective Concurrent Object-Oriented Languages\". PhD. Thesis. University of Tokyo. January 1999.
-   Ilya Bagrak and Olin Shivers. \"trx: Regular-Tree Expressions, now in Scheme\". *2004 Scheme Workshop*. September 2004.
-   J. Michael Ashley and Charles Consel. \"Fixpoint Computation for Polyvariant Static Analyses of Higher-Order Applicative Programs\". *ACM Transactions on Programming Languages and Systems*. 16(5). September 1994.
-   J. Michael Ashley and R. Kent Dybvig. \"A Practical and Flexible Flow Analysis for Higher-Order Languages\". *ACM Transactions on Programming Languages and Systems*. Vol. 20, Num. 4. July 1998.
-   J. Michael Ashley and R. Kent Dybvig. \"An Efficient Implementation of Multiple Return Values in Scheme\". *1994 ACM Conference on LISP and Functional Programming*. June 1994.
-   J. Michael Ashley and Richard M. Salter. \"A Revised State Space Model for a Logic Programming Embedding in Scheme\". *BIGRE Bulletin*. 65. July 1989.
-   J. Michael Ashley. \"A Practical and Flexible Flow Analysis for Higher-Order Languages\". *Conference Record of POPL\'96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages*. 1996.
-   J. Michael Ashley. \"A Practical and Flexible Flow Analysis for Higher-Order Languages\". PhD. Thesis. Indiana University. 1996.
-   J. Michael Ashley. \"The Effectiveness of Flow Analysis for Inlining\". *Proceedings of the 1997 ACM International Conference on Functional Programming*.
-   Jacob Matthews, Robert Bruce Findler, Matthew Flatt, Matthias Felleisen. \"A Visual Environment for Developing Context-Sensitive Term Rewriting Systems\". *International Conference on Rewriting Techniques and Applications (RTA2004)*. 2004.
-   Jacob Matthews, Robert Bruce Findler, Paul T. Graunke, Shriram Krishnamurthi, Matthias Felleisen. \"Automatically Restructuring Software for the Web\". *Journal of Automated Software Engineering*. 2004.
-   Jacob Matthews. \"Component Deployment with PLaneT: You Want it Where?\". *2006 Workshop on Scheme and Functional Programming*. September 2006.
-   James Philbin. \"An Overview of the Sting Operating System\". *Proceedings of the 4th NEC Software Conference*. October 1992.
-   James Philbin. \"Customizable Policy Management in the Sting Operating System\". *US/Japan Workshop on Parallel Symbolic Computing, Springer-Verlag LNCS 748*. October 1992.
-   James Philbin. \"STING: An Operating System for Modern Languages\". PhD. Thesis. Yale University. May 1993.
-   James S. Miller and Guillermo J. Rozas. \"Garbage Collection is Fast, But a Stack is Faster\". MIT AI Lab. AIM-1462. March 1994.
-   James S. Miller. \"Multischeme: A Parallel Processing System based on MIT Scheme\". PhD. Thesis. Massachusetts Institute of Technology. MIT Technical Report MIT/LCS/TR-402. September 1987.
-   Jan Vitek, Manuel Serrano and Dimitri Thanos. \"Security and Communication in Mobile Object Systems\". *Mobile Object Systems*. 1997.
-   Jay McCarthy and Shriram Krishnamurthi. \"Interaction-Safe State for the Web\". *2006 Workshop on Scheme and Functional Programming*. September 2006.
-   Jean-Francois Rotge. \"SGDL-Scheme: A high-level algorithmic language for projective solid modeling programming\". *Scheme and Functional Programming 2000*. September 2000.
-   Jean-Michel Hufflen. \"Implementing a Bibliography Processor in Scheme\". *2005 Workshop on Scheme and Functional Programming*. September 2005.
-   Jeffrey Mark Siskind. \"Flow-Directed Lightweight Closure Conversion\". NEC Research Institute, Inc.. Technical Report 99-190R. December 1999.
-   Jeremiah Willcock, Andrew Lumsdaine and Daniel Quinlan. \"Tabled execution in Scheme (Scheme Pearl)\". *2008 Workshop on Scheme and Functional Programming*. September 2008.
-   Jesper Jørgensen. \"Compiler Generation by Partial Evaluation\". Masters Thesis. DIKU, University of Copenhagen. 1991.
-   Jesper Jørgensen. \"Generating a Pattern Matching Compiler by Partial Evaluation\". *Glasgow Workshop on Functional Programming*. July 1990.
-   Jesper Jørgensen. \"Generating a compiler for a lazy language by partial evaluation\". *Principles of Programming Languages (POPL\'92)*. January 1992.
-   Jesper Jørgensen. \"Similix: A Self-Applicable Partial Evaluator for Scheme\". *Partial Evaluation: Practice and Theory (DIKU International Summer School 1998)*. LNCS 1706. June 1998.
-   Jessica Gronski, Kenneth Knowles, Aaron Tomb, Stephen N. Freund and Cormac Flanagan. \"Sage: Hybrid Checking for Flexible Specifications\". *2006 Workshop on Scheme and Functional Programming*. September 2006.
-   Jim des Rivières and Brian Cantwell Smith. \"The implementation of procedurally reflective languages\". *1984 ACM Symposium on LISP and functional programming*. August 1984.
-   Joel F. Bartlett. \"SCHEME-\>C: A Portable Scheme-to-C Compiler\". 1989.
-   John Batali, Edmund Goodhue, Chris Hanson, Howie Shrobe, Richard M. Stallman and Gerald Jay Sussman. \"The Scheme-81 Architecture - System and Chip\". *Proceedings, Conference on Advanced Research in VLSI*. 1982.
-   John Clements and Matthias Felleisen. \"A Tail-Recursive Machine with Stack Inspection\". *Transactions on Programming Languages and Systems*. 2004.
-   John Clements and Matthias Felleisen. \"A Tail-Recursive Semantics for Stack Inspections\". *European Symposium on Programming (ESOP\'2003)*. April 2003.
-   John Clements, Matthew Flatt, Matthias Felleisen. \"Modeling an Algebraic Stepper\". *Proceedings of ESOP 2001*. 2001.
-   John Clements, Paul T. Graunke, Shriram Krishnamurthi and Matthias Felleisen. \"Little Languages and their Programming Environments\". *Proceedings of Monterey Workshop 2001*. 2001.
-   John Clements, Shriram Krishnamurthi, Matthias Felleisen. \"Little Languages and their Programming Environments \". Rice University. TR 99-350. 1999.
-   John D. Ramsdell, William M. Farmer, Joshua D. Guttman, Leonard G. Monk, Vipin Swarup. \"The VLISP PreScheme Front End\". MITRE Corporation. September 1992.
-   John D. Ramsdell. \"The Revised VLISP PreScheme Front End\". MITRE Corporation. August 1993.
-   John Franco and Daniel P. Friedman. \"Creating Efficient Programs by Exchanging Data for Procedures\". *Journal of Computer Languages*. Vol. 4. Num. 1. 1989.
-   John Franco and Daniel P. Friedman. \"Creating Efficient Programs by Exchanging Data for Procedures\". Indiana University. Computer Science Technical Report 245. March 1988.
-   John Hatcliff and Robert Glück. \"Reasoning about Hierarchies of Online Program Specialization Systems\". *Partial Evaluation: Dagstuhl Seminar*. LNCS 1110. February 1996.
-   John Hatcliff. \"Foundations of Partial Evaluation and Program Specialization\". Kansas State University. March 1999.
-   John Moore. \"Get stuffed: Tightly packed abstract protocols in Scheme\". *2009 Workshop on Scheme and Functional Programming*. August 2009.
-   John R. Rose and Hans Muller. \"Integrating the Scheme and C languages\". *Proceedings of the conference on Lisp and functional programming*. June 1992.
-   John Wade Ulrich. \"Enumeration Algorithms and Non-deterministic Programming in Scheme\". *BIGRE Bulletin*. 65. July 1989.
-   John Wiseman Simmons II and Daniel P. Friedman. \"A Reflective System is as Extensible as its Internal Representations: An Illustration\". Computer Science Department, Indiana University. October 1992.
-   John Wiseman Simmons II, Stanley Jefferson and Daniel P. Friedman. \"Language Extension via First-class Interpreters\". Computer Science Department, Indiana University. September 1992.
-   Jonathan A. Rees and Bruce R. Donald. \"Program mobile robots in Scheme\". *Proceedings of the 1992 IEEE International Conference on Robotics and Automation*. 1992.
-   Jonathan A. Rees. \"A Security Kernel Based on the Lambda-Calculus\". MIT AI Lab. AIM-1564. March 1996.
-   Jonathan A. Rees. \"A Security Kernel Based on the Lambda-Calculus\". PhD. Thesis. February 1995.
-   Jonathan Sobel, Erik Hilsdale, R. Kent Dybvig, Daniel P. Friedman. \"Abstraction and Performance from Explicit Monadic Reflection\". *2005 Workshop on Scheme and Functional Programming*. September 2005.
-   Jonathon Sobel and Daniel P. Friedman. \"Recycling Continuations\". *1998 International Conference on Functional Programming (ICFP\'98)*. September 1998.
-   Joshua D. Guttman, John D. Ramsdell and Mitchell Wand. \"VLISP: A Verified Implementation of Scheme\". *Lisp and Symbolic Computation*. Vol. 8 No. 1/2. 1995.
-   Joshua D. Guttman, John D. Ramsdell and Vipin Swarup. \"The VLISP Verified Scheme System\". *Lisp and Symbolic Computation*. Vol. 8 No. 1/2. 1995.
-   Joshua D. Guttman, John D. Ramsdell, Leonard G. Monk, William M. Farmer, Vipin Swarup. \"The VLISP Byte-Code Compiler\". MITRE Corporation. September 1992.
-   Joshua D. Guttman, Leonard G. Monk, John D. Ramsdell, William M. Farmer, Vipin Swarup. \"A Guide to VLISP, A Verifed Programming Language Implementation\". MITRE Corporation. September 1992.
-   Joshua D. Guttman, Leonard G. Monk, John D. Ramsdell, William M. Farmer, Vipin Swarup. \"The VLISP Flattener\". MITRE Corporation. September 1992.
-   José M. Piquer and Christian Queinnec. \"Transpive: A distributed lisp system\". *La lettre du Transputer*. 16. December 1992.
-   Julia L. Lawall and Daniel P. Friedman. \"Toward Leakage Containment\". Computer Science Department, Indiana University. February 1992.
-   Julia L. Lawall and Olivier Danvy. \"Continuation-Based Partial Evaluation\". *1994 ACM Conference on Lisp and Functional Programming*. 1994.
-   Julia L. Lawall and Olivier Danvy. \"Continuation-Based Partial Evaluation\". Computer Science Department, Brandeis University. Technical Report CS-95-178. February 1995.
-   Julia L. Lawall and Olivier Danvy. \"Separating Stages in the Continuation-Passing Style Transformation\". *Proceedings of POPL93, the 1993 ACM Symposium on Principles of Programming Languages*. 1993.
-   Julia L. Lawall. \"Continuation Introduction and Elimination in Higher-Order Programming Languages\". PhD. Thesis. Indiana University, Computer Science Department. July 1994.
-   Julia L. Lawall. \"Proofs by structural induction using partial evaluation\". *Proceedings of the ACM SIGPLAN symposium on Partial evaluation and semantics-based program manipulation (PEPM\'93)*. 1993.
-   Jörg F. Wittenberger. \"Askemos - a distributed settlement\". *SSGRR2002*. 2002.
-   Karoline Malmkjær and Olivier Danvy. \"Preprocessing by Specialization\". 1990.
-   Karoline Malmkjær and Peter Ørbæk. \"Polyvariant specialization for higher-order, block-structured languages\". *Partial evaluation and semantics-based program manipulation (PEPM\'95)*. June 1995.
-   Karoline Malmkjær. \"Abstract Interpretation of Partial-Evaluation Algorithms\". PhD. Thesis. Kansas State University. 1993.
-   Karoline Malmkjær. \"On Static Properties of Specialized Programs\". *BIGRE journal*. number 74. October 1991.
-   Karoline Malmkjær. \"Predicting Properties of Residual Programs\". *Partial Evaluation and Semantics-Based Program Manipulation (PEPM\'92)*. June 1992.
-   Karoline Malmkjær. \"Predicting Properties of Specialized Programs\". Kansas State University. PhD proposal. November 1991.
-   Karoline Malmkjær. \"Program and Data Specialization Principles, Applications, and Self-Application\". Masters Thesis. DIKU. August 1989.
-   Karoline Malmkjær. \"Towards Efficient Partial Evaluation\". *Partial evaluation and semantics-based program manipulation (PEPM\'93)*. August 1993.
-   Kathryn E. Gray and Matthew Flatt. \"Compiling Java to PLT Scheme\". *2004 Scheme Workshop*. September 2004.
-   Ken Dickey. \"Thinking Scheme\". *2008 Workshop on Scheme and Functional Programming*. September 2008.
-   Kenichi Asai, Hidehiko Masuhara and Akinori Yonezawa. \"Partial Evaluation of Call-by-value Lambda-calculus with Side-effects\". *ACM SIGPLAN Conference on Partial Evaluation and Semantics-Based Program Manipulation (PEPM \'97)*. June 1997.
-   Kenichi Asai, Hidehiko Masuhara and Akinori Yonezawa. \"Partial Evaluation of Call-by-value lambda-calculus with Side-effects\". University of Tokyo. 96-04. November 1996.
-   Kenichi Asai, Hidehiko Masuhara, S. Matsuoka and Akinori Yonezawa. \"Partial evaluation as a compiler for reflective languages\". University of Tokyo. 95-10. December 1995.
-   Kenichi Asai, S. Matsuoka and Akinori Yonezawa. \"Duplication and Partial Evaluation - For a Better Understanding of Reflective Languages\". *Lisp and Symbolic Computation*. Vol. 9, Nos. 2/3. May/June 1996.
-   Kenichi Asai, S. Matsuoka and Akinori Yonezawa. \"Roles of a Partial Evaluator for the Reflective Language Black\". University of Tokyo. 94-11. May 1994.
-   Kenichi Asai. \"Binding-Time Analysis for Both Static and Dynamic Expressions\". *New Generation Computing*. Vol. 20. No. 1. November 2001.
-   Kenichi Asai. \"Binding-Time Analysis for Both Static and Dynamic Expressions\". *Static Analysis*. LNCS 1694. September 1999.
-   Kenichi Asai. \"Can partial evaluation improve the performance of ray tracing?\". Ochanomizu University. June 2002.
-   Kenichi Asai. \"Integrating Partial Evaluators into Interpreters,\". *Semantics, Applications, and Implementation of Program Generation*. LNCS 2196. September 2001.
-   Kenichi Asai. \"Offline Partial Evaluation for Shift and Reset\". *Partial Evaluation and Semantics-Based Program Manipulation (PEPM \'04)*. August 2004.
-   Kenichi Asai. \"Online partial evaluation for shift and reset\". *Proceedings of the 2002 ACM SIGPLAN workshop on Partial evaluation and semantics-based program manipulation (PEPM\'02)*. January 2002.
-   Kenichi Asai. \"Reflecting on the Metalevel Interpreter Written in Direct Style\". *International Lisp Conference 2003 (ILC 2003)*. October 2003.
-   Kenjiro Taura, Akinori Yonezawa. \"Schematic: A Concurrent Object-Oriented Extension to Scheme\". *Workshop on Object-Based Parallel and Distributed Computing (OBPDC\'96)*. 1996.
-   Kenneth R. Anderson and Timothy J. Hickey. \"Reflecting Java into Scheme\". *Proceedings of Reflection 99*. Lecture Notes in Computer Science, v. 1616. 1999.
-   Kenneth R. Anderson, Timothy J. Hickey and Peter Norvig. \"SILK: a playful blend of Scheme and Java\". *Scheme and Functional Programming 2000*. September 2000.
-   Kirill Lisovsky, Dmitry Lizorkin. \"XML Path Language (XPath) and its functional implementation SXPath\". *Russian Digital Libraries Journal*. Vol. 6 - No 4. 2003.
-   Kirill Lisovsky, Dmitry Lizorkin. \"XSLT and XLink and their implementation with functional techniques\". *Russian Digital Libraries Journal*. Vol. 6 - No 5. 2003.
-   Kirill Lisovsky. \"Scheme program souce code as a semistructured data\". *2nd Workshop on Scheme and Functional Programming*. September 2001.
-   Kirill Lisovsky. \"Scheme-based XML Application Server\". *Workshop on Advanced Functional Programming (AFP\'2002)*. August 2002.
-   Kurt Nørmark. \"A Suite of WWW-based Tools for Advanced Course Management\". *Innovation and Technology in Computer Science Education (ITiCSE, Finland)*. July 2000.
-   Kurt Nørmark. \"Deriving a Comprehensive Document from a Concise Document - Document Engineering in Scheme\". *2007 Workshop on Scheme and Functional Programming*. September 2007.
-   Kurt Nørmark. \"Development of LAML - A Suite of Web Software for Scheme\". May 2002.
-   Kurt Nørmark. \"Programmatic WWW authoring using Scheme and LAML\". *WWW2002: The Eleventh International World Wide Web Conference*. March 2002.
-   Kurt Nørmark. \"Programming World Wide Web pages in Scheme\". *Sigplan Notices*. vol. 34, no. 12. 1999.
-   Kurt Nørmark. \"Scheme Program Documentation Tools\". *2004 Scheme Workshop*. September 2004.
-   Kurt Nørmark. \"The duality of XML Markup and Programming notation\". *IADIS WWW/Internet 2003*. November 2003.
-   Kurt Nørmark. \"Using Lisp as a Markup Language \-- The LAML Approach\". *European Lisp User Group Meeting, Amsterdam*. 1999.
-   Kurt Nørmark. \"WEB Based Lecture Notes - The LENO Approach\". November 2001.
-   Kurt Nørmark. \"Web Programming in Scheme - the LAML approach\". April 2002.
-   Kurt Nørmark. \"Web Programming in Scheme with LAML\". April 2003.
-   Kurt Nørmark. \"XML Transformation in Scheme with LAML - a Minimalistic Approach\". *International Lisp Conference 2003*. October 2003.
-   Kurt Nørmark. \"XML in LAML - Web Programming in Scheme\". August 2002.
-   Lars Thomas Hansen and William D. Clinger. \"An Experimental Study of Renewal-Older-First Garbage Collection\". *International Conference on Functional Programming (ICFP\'2002)*. October 2002.
-   Lars Thomas Hansen. \"The Impact of Programming Style on the Performance of Scheme Programs\". Masters Thesis. University of Oregon. August 1992.
-   Lennart Swart. \"Partial Evaluation using Rewrite Rules: A Specification of a Partial Evaluator for Similix in Stratego\". Masters Thesis. Utrecht University. August 2002.
-   Luc Moreau and Christian Queinnec. \"Design and Semantics of Quantum: a Language to Control Resource Consumption in Distributed Computing\". *Usenix Conference on Domain-Specific Languages (DSL\'97)*. October 1997.
-   Luc Moreau and Christian Queinnec. \"Distributed Computations Driven by Resource Consumption\". *IEEE International Conference on Computer Languages (ICCL\'98)*. May 1998.
-   Luc Moreau and Christian Queinnec. \"On the Finiteness of Resources in Distributed Computing\". INRIA. Research Report RR-3147. April 1997.
-   Luc Moreau and Christian Queinnec. \"Partial Continuations as the Difference of Continuations\". *International Conference on Programming Language Implementation and Logic Programming (PLILP\'94)*. number 844 in Lecture Notes in Computer Science. September 1994.
-   Luc Moreau and Daniel Ribbens. \"Sound Rules for Parallel Evaluation of a Functional Language with callcc\". *ACM conference on Functional Programming and Computer Architecture (FPCA\'93)*. June 1993.
-   Luc Moreau and Daniel Ribbens. \"The Semantics of pcall and fork\". *PSLS 95 - Parallel Symbolic Langages and Systems*. number 1068 in Lecture Notes in Computer Science. October 1995.
-   Luc Moreau and David DeRoure. \"A Distributed Garbage Collector for NeXeme\". University of Southampton. 1997.
-   Luc Moreau, David DeRoure and Ian Foster. \"NeXeme: a Distributed Scheme Based on Nexus\". *Third International Europar Conference (EURO-PAR\'97)*. volume 1300 of Lecture Notes in Computer Science. August 1997.
-   Luc Moreau. \"A Distributed Garbage Collector with Diffusion Tree Reorganisation and Object Mobility\". *Proceedings of the Third International Conference of Functional Programming (ICFP\'98)*. September 1998.
-   Luc Moreau. \"A Parallel Functional Language with First-Class Continuations (Programming Style and Semantics)\". *Computers and Artificial Intelligence*. 14(2). 1995.
-   Luc Moreau. \"An Operational Semantics for a Parallel Language with Continuations\". *Parallel Architectures and Languages Europe (PARLE\'92)*. number 605 in Lecture Notes in Computer Science. June 1992.
-   Luc Moreau. \"Continuing into the Future: the Return (Invited Paper)\". *8th International Conference in Systems Research Informatics and Cybernetics (InterSymp\'96)*. August 1996.
-   Luc Moreau. \"Correctness of a Distributed-Memory Model for Scheme\". *Second International Europar Conference (EURO-PAR\'96)*. number 1123 in Lecture Notes in Computer Science. August 1996.
-   Luc Moreau. \"Correctness of a Distributed-Memory Model for Scheme\". University of Southampton. Technical Report M96/3. 1996.
-   Luc Moreau. \"Hierarchical Distributed Reference Counting\". *Proceedings of the First ACM SIGPLAN International Symposium on Memory Management (ISMM\'98)*. October 1998.
-   Luc Moreau. \"NeXeme: A Distributed Scheme Based on Nexus (Reference Manual and User\'s Guide)\". University of Southampton. Technical Report M97/8. November 1997.
-   Luc Moreau. \"Non-speculative and Upward Invocation of Continuations in a Parallel Language\". *International Joint Conference on Theory and Practice of Software Development (TAPSOFT/FASE\'95)*. number 915 in Lecture Notes in Computer Science. May 1995.
-   Luc Moreau. \"Programming in a Parallel Functional Language with Continuations\". *Avancées Applicatives. Journées Francophones des Langages Applicatifs (JFLA\'92)*. volume 76-77. February 1992.
-   Luc Moreau. \"Sound Evaluation of Parallel Functional Programs with First-Class Continuations\". PhD. Thesis. University of Liège. June 1994.
-   Luc Moreau. \"The PCKS-machine: An Abstract Machine for Sound Evaluation of Parallel Functional Programs with First-Class Continuations\". *European Symposium on Programming (ESOP\'94)*. number 788 in Lecture Notes in Computer Science. April 1994.
-   Luc Moreau. \"The Semantics of Future in the Presence of First-Class Continuations and Side-effects\". University of Southampton. Technical Report M95/3. November 1995.
-   Luc Moreau. \"The Semantics of Scheme with Future\". *ACM SIGPLAN International Conference on Functional Programming (ICFP\'96)*. May 1996.
-   Luc Moreau. \"The Semantics of Scheme with Future\". University of Southampton. Technical Report M95/7. 1995.
-   M. Esen Tuna, Steven D. Johnson and Robert G. Burger. \"Continuations in Hardware-Software Codesign\". *IEEE Proceedings of the International Conference on Computer Design*. October 1994.
-   Mads Sig Ager, Olivier Danvy and Henning Korsholm Rohde. \"Fast Partial Evaluation of Pattern Matching in Strings\". *Partial Evaluation and Semantics-Based Program Manipulation (PEPM \'03)*. 2003.
-   Mads Sig Ager, Olivier Danvy and Henning Korsholm Rohde. \"Fast Partial Evaluation of Pattern Matching in Strings\". University of Aarhus. BRICS-RS-03-11. February 2003.
-   Mads Sig Ager, Olivier Danvy and Henning Korsholm Rohde. \"On Obtaining Knuth, Morris, and Pratt\'s String Matcher by Partial Evaluation\". *ASIAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation, ASIA-PEPM \'02*. July 2002.
-   Manfred Widera. \"A Sketch of Complete Type Inference for Functional Programming\". *International Workshop on Functional and (Constraint) Logic Programming (WLFP 2001)*. September 2001.
-   Manfred Widera. \"An Algorithm for Checking the Disjointness of Types\". *2nd Workshop on Scheme and Functional Programming*. September 2001.
-   Manuel Serrano and Erick Gallesio. \"This is Scribe!\". *Workshop on Scheme and Functional Programming (2002)*. October 2002.
-   Manuel Serrano and Hans J. Boehm. \"Understanding Memory allocations of Scheme Programs\". *International Conference on Functional Programming, ICFP\'00*. September 2000.
-   Manuel Serrano and Pierre Weis. \"1+1=1: an optimizing Caml compiler\". *Workshop on ML and its Applications, WML\'94*. 1994.
-   Manuel Serrano and Pierre Weis. \"Bigloo: a portable and optimizing compiler for strict functional languages\". *Static Analysis Symposium, SAS\'95*. September 1995.
-   Manuel Serrano, Frédéric Boussinot and Bernard Serpette. \"Scheme Fair Threads\". *Principles and Practice of Declarative Programming (PPDP 2004)*. August 2004.
-   Manuel Serrano, Frédéric Boussinot and Bernard Serpette. \"Scheme FairThreads\". *2th International Lisp Conference*. October 2002.
-   Manuel Serrano, Marc Feeley. \"Storage Use Analysis and its Applications\". *ACM SIGPLAN International Conference on Functional Programming*. May 1996.
-   Manuel Serrano. \"A Fresh Look to Inlining Decision\". *International Computer Symposium, ICS\'95*. November 1995.
-   Manuel Serrano. \"Bee: an Integrated Development Environment for the Scheme Programming Language\". *Journal of Functional Programming \'00*. May 2000.
-   Manuel Serrano. \"Control flow analysis: a functional languages compilation paradigm\". *Symposium on Applied Computing, SAC\'95*. February 1995.
-   Manuel Serrano. \"HopTex, compiling HTML to LaTeX with CSS\". *2011 Workshop on Scheme and Functional Programming*. October 2011.
-   Manuel Serrano. \"Inline expansion: when and how?\". *Programming Language Implementation and Logic Programming, PLILP\'97*. September 1997.
-   Manuel Serrano. \"Rgc: un générateur d\'analyseurs lexicaux efficaces en Scheme\". *Proceedings of JFLA\'92*. 1992.
-   Manuel Serrano. \"The HOP Development Kit\". *2006 Workshop on Scheme and Functional Programming*. September 2006.
-   Manuel Serrano. \"Vers une compilation portable et performante des langages fonctionnels\". PhD. Thesis. l\'Université Paris VI. December 1994.
-   Manuel Serrano. \"Vers une programmation fonctionnelle praticable\". 2000.
-   Marc Feeley and Danny Dubé. \"PICBIT: A Scheme System for the PIC Microcontroller\". *Scheme Workshop 2003*. November 2003.
-   Marc Feeley, Guy Lapalme. \"Closure Generation Based on Viewing LAMBDA As EPSILON Plus COMPILE\". *Journal of Computer Languages*. Vol. 17, No. 4. 1992.
-   Marc Feeley, Guy Lapalme. \"Using Closures for Code Generation\". *Journal of Computer Languages*. Vol. 12, No. 1. 1987.
-   Marc Feeley, James S. Miller, Guillermo J. Rozas, Jason A. Wilson. \"Compiling Higher-Order Languages into Fully Tail-Recursive Portable C\". département d\'informatique et r.o., Université de Montréal. Rapport technique 1078. Aout 1997.
-   Marc Feeley, James S. Miller. \"A Parallel Virtual Machine for Efficient Scheme Compilation\". *Proceedings of the 1990 ACM SIGPLAN Conference on Lisp and Functional Programming*. June 1990.
-   Marc Feeley, Marcel Turcotte, Guy Lapalme. \"Using Multilisp for Solving Constraint Satisfaction Problems: An Application to Nucleic Acid 3D Structure Determination\". *Lisp and Symbolic Computation*. Vol. 7. 1994.
-   Marc Feeley, Martin Larose. \"Etos: an Erlang to Scheme compiler\". département d\'informatique et r.o., Université de Montréal. Rapport technique 1079. Aout 1997.
-   Marc Feeley. \"A Better API for First-Class Continuations\". *2nd Workshop on Scheme and Functional Programming*. September 2001.
-   Marc Feeley. \"A Message Passing Implementation of Lazy Task Creation\". 748. November 1993.
-   Marc Feeley. \"A portable implementation of first-class continuations for unrestricted interoperability with C in a multithreaded Scheme\". *Scheme and Functional Programming 2000*. September 2000.
-   Marc Feeley. \"An Efficient and General Implementation of Futures on Large Scale Shared-Memory Multiprocessors\". PhD. Thesis. Brandeis University. April 1993.
-   Marc Feeley. \"Deux approches à l\'implantation du language Scheme\". Masters Thesis. Université de Montréal. May 1986.
-   Marc Feeley. \"Lazy Remote Procedure Call and its Implementation in a Parallel Variant of C\". 1995.
-   Marcus Crestani. \"Foreign-Function Interfaces for Garbage-Collected Programming Languages\". *2008 Workshop on Scheme and Functional Programming*. September 2008.
-   Mario Latendresse. \"Automatic generation of compact programs and virtual machines for Scheme\". *Scheme and Functional Programming 2000*. September 2000.
-   Mario Latendresse. \"Génération de machines virtuelles pour l\'exécution de programmes compressés\". PhD. Thesis. Université de Montréal. April 2000.
-   Mark DePristo. \"SINTL: A Strongly-Typed Generic Intermediate Language for Scheme\". Northwestern University. May 2000.
-   Martin Gasbichler and Eric Knauel. \"Commander S - The shell as a browser\". *2005 Workshop on Scheme and Functional Programming*. September 2005.
-   Martin Gasbichler and Michael Sperber. \"Processes vs. user-level threads in scsh\". *Workshop on Scheme and Functional Programming (2002)*. October 2002.
-   Martin Gasbichler, Eric Knauel, Michael Sperber and Richard A. Kelsey. \"How to Add Threads to a Sequential Language Without Getting Tangled Up\". *Scheme Workshop 2003*. November 2003.
-   Martin Gasbichler, Holger Gast. \"Soft Interfaces: Typing Scheme At The Module Level\". *2nd Workshop on Scheme and Functional Programming*. September 2001.
-   Martin Gasbichler, Michael Sperber. \"A Direct Implementation of Shift/Reset\". *IFL 2001*. 2001.
-   Martin Larose, Marc Feeley. \"A Compacting Incremental Collector and its Performance in a Production Quality Compiler\". *Proceedings of the 1998 International Symposium on Memory Management*. October 1998.
-   Matthew Flatt and Eli Barzilay. \"Keyword and Optional Arguments in PLT Scheme\". *2009 Workshop on Scheme and Functional Programming*. August 2009.
-   Matthew Flatt and Matthias Felleisen. \"Units: Cool Modules for HOT Languages\". *Proceedings of PLDI 98*. 1998.
-   Matthew Flatt, Robert Bruce Findler, Shriram Krishnamurthi and Matthias Felleisen. \"Programming Languages as Operating Systems (or, Revenge of the Son of the Lisp Machine)\". *Proceedings of ICFP 99*. 1999.
-   Matthew Flatt, Robert Bruce Findler. \"Kill-Safe Synchronization Abstractions\". *Programming Language Design and Implementation (PLDI 2004)*. 2004.
-   Matthew Flatt. \"Composable and Compilable Macros: You Want it When?\". *International Conference on Functional Programming (ICFP\'2002)*. 2002.
-   Matthew Flatt. \"Programming Languages for Reusable Software Components\". PhD. Thesis. Rice University.
-   Matthew Fuchs. \"Dreme: for Life in the Net\". PhD. Thesis. New York University. September 1995.
-   Matthew Might and Tarun Prabhu. \"Interprocedural Dependence Analysis of Higher-Order Programs via Stack Reachability\". *2009 Workshop on Scheme and Functional Programming*. August 2009.
-   Matthias Blume. \"Separate Compilation for Scheme, draft paper\". 1997.
-   Matthias Felleisen and Daniel P. Friedman. \"A Closer Look At Export and Import Statements\". *Journal of Computer Languages*. 11. 1. 1986.
-   Matthias Felleisen and Paul A. Steckler. \"Implementing a Static Debugger for a First-Order Functional Programming Language\". Rice University. TR 00-359. 2000.
-   Matthias Felleisen, Daniel P. Friedman, Bruce F. Duba and John Merrill. \"Beyond Continuations\". Indiana University. Computer Science Dept. Technical Report 216. February 1987.
-   Matthias Felleisen, Daniel P. Friedman, Eugene E. Kohlbecker and Bruce F. Duba. \"Reasoning with Continuations\". *Proceedings of the Symposium on Logic in Computer Science*. June 1986.
-   Matthias Felleisen, Mitchell Wand, Daniel P. Friedman and Bruce F. Duba. \"Abstract continuations: a mathematical semantics for handling full jumps\". *Proceedings of the 1988 ACM conference on LISP and functional programming*. July 1988.
-   Matthias Felleisen, Robert Bruce Findler, Matthew Flatt and Shriram Krishnamurthi. \"Building Little Languages with Macros\". *Dr. Dobb\'s Journal*. April 2004.
-   Matthias Felleisen, Robert Bruce Findler, Matthew Flatt and Shriram Krishnamurthi. \"Fostering Little Languages\". *Dr. Dobb\'s Journal*. March 2004.
-   Matthias Felleisen, Robert Bruce Findler, Matthew Flatt and Shriram Krishnamurthi. \"The Structure and Interpretation of the Computer Science Curriculum\". *Functional and Declarative Programming in Education (FDPE2002)*. October 2002.
-   Matthias Felleisen, Robert Bruce Findler, Matthew Flatt and Shriram Krishnamurthi. \"The Structure and Interpretation of the Computer Science Curriculum\". *Journal of Functional Programming*. 2004.
-   Matthias Felleisen, Robert Bruce Findler, Matthew Flatt and Shriram Krishnamurthi. \"The TeachScheme! Project: Computing and Programming for Every Student\". *Computer Science Education*. 2004.
-   Matthias Felleisen. \"Developing Interactive Web Programs\". *Summer School on Advanced Functional Programming 2002*. August 2002.
-   Matthias Felleisen. \"Recursion and Circularity: Extended Puzzle with Solution\". Indiana University. TR-201. October 1986.
-   Matthias Felleisen. \"Transliterating Prolog into Scheme\". Indiana University. Computer Science Technical Report 182. October 1985.
-   Matthias Radestock. \"Run Once, Write Anyway\". *International Lisp Conference (ILC) 2003*. October 2003.
-   Mayer Goldberg. \"A variadic extension of Curry\'s fixed-point combinator\". *Workshop on Scheme and Functional Programming (2002)*. October 2002.
-   Mehmet Fatih Köksal, Remzi Emre Başar, Suzan Üsküdarlı. \"Screen-Replay: A Session Recording and Analysis Tool for DrScheme\". *2009 Workshop on Scheme and Functional Programming*. August 2009.
-   Michael A. Eisenberg. \"Bochser: An Integrated Scheme Programming System\". Massachusetts Institute of Technology. MIT Computer Science Technical Report 349. October 1985.
-   Michael A. Eisenberg. \"Programmable Applications: Interpreter Meets Interface\". MIT AI Lab. AIM-1325. October 1991.
-   Michael Bridgen, Noel Welsh, Matthias Radestock. \"Scheme in The Real World: A Case Study\". August 2003.
-   Michael C. Rubenstein and Richard M. Salter. \"Computationally Extended Logic Programming\". *Journal of Computer Languages*. Vol. 12. Num. 1. 1987.
-   Michael Sperber and Martin Gasbichler. \"Final shift for call/cc: Direct implementation of shift and reset\". *International Conference on Functional Programming (ICFP\'2002)*. October 2002.
-   Michael Sperber and Peter Thiemann. \"Realistic Compilation by Partial Evaluation\". *Proc. of the ACM SIGPLAN \'96 Conference on Programming Language Design and Implementation*. May 1996.
-   Michael Sperber and Peter Thiemann. \"The Essence of LR Parsing\". *Partial Evaluation and Semantics-Based Program Manipulation PEPM \'95*. June 1995.
-   Michael Sperber and Peter Thiemann. \"Two for the Price of One: Composing Partial Evaluation and Compilation\". *Proc. of the ACM SIGPLAN \'97 Conference on Programming Language Design and Implementation*. June 1997.
-   Michael Sperber, Peter Thiemann and Herbert Klaeren. \"Distributed Partial Evaluation\". *Proc. of the Second International Symposium on Parallel Symbolic Computation, PASCO\'97*. July 1997.
-   Michael Sperber, Robert Glück and Peter Thiemann. \"Bootstrapping Higher-Order Program Transformers from Interpreters\". *Proceedings 11th Annual ACM Symposium on Applied Computing, SAC (SAC \'96)*. February 1996.
-   Michael Sperber. \"Computer-Assisted Lighting Design and Control\". PhD. Thesis. University of Tübingen. June 2001.
-   Michael Sperber. \"Self-Applicable Online Partial Evaluation\". *Partial Evaluation: Dagstuhl Seminar*. LNCS 1110. February 1996.
-   Mikael Hansen, Paw Iversen and Jimmy Juncker. \"SLAML - Server side LAML (Preliminary Masters Thesis Report)\". Aalborg University. January 2002.
-   Mikael Hansen, Paw Iversen and Jimmy Juncker. \"SLAML - Server side LAML\". Masters Thesis. Aalborg University. June 2002.
-   Mike Fagan. \"Soft Typing: An Approach to Type Checking for Dynamically Typed Languages\". PhD. Thesis. Rice University.
-   Mike MacHenry and Jacob Matthews. \"Topsl: a Domain-Specific Language for On-Line Surveys\". *2004 Scheme Workshop*. September 2004.
-   Mitchell Wand and Daniel P. Friedman. \"Compiling Lambda Expressions Using Continuations and Factorizations\". *Journal of Computer Languages*. 3. 1978.
-   Mitchell Wand and Daniel P. Friedman. \"The Mystery of the Tower Revealed: A Non-Reflective Description of the Reflective Tower\". *Meta-Level Architectures and Reflection*. 1988.
-   Mitchell Wand. \"A Semantic Algebra for Logic Programming\". Indiana University. TR-148. August 1983.
-   Mitchell Wand. \"Continuation-Based Multiprocessing Revisited\". *Higher-Order and Symbolic Computation*. 12(3). October 1999.
-   Mitchell Wand. \"Continuation-Based Multiprocessing\". *Conference Record of the 1980 Lisp Conference*. 1980.
-   Mitchell Wand. \"Continuation-Based Multiprocessing\". *Higher-Order and Symbolic Computation*. 12(3). October 1999.
-   Mitchell Wand. \"Continuation-Based Program Transformation Strategies\". *Journal of the ACM*. 27. 1. January 1980.
-   Mitchell Wand. \"Finding the Source of Type Errors\". *Conference Record of the Thirteenth Annual Symposium on Principles of Programming Languages*. 1986.
-   Mitchell Wand. \"From Interpreter to Compiler: A Representational Derivation\". *Programs as Data Objects*. Lecture Notes in Computer Science. 1986.
-   Mitchell Wand. \"The Mystery of the Tower Revealed: a Non-Reflective Description of the Reflective Tower\". *Proceedings of the 1986 ACM Symposium on LISP and Functional Programming*. August 1986.
-   Morry Katz and Daniel Weise. \"Continuing Into the Future: On the Interaction of Futures and First-Class Continuations\". *Proceedings of the 1990 ACM Conference on Lisp and Functional Programming*. June 1990.
-   Morry Katz and Daniel Weise. \"Towards a New Perspective on Partial Evaluation\". *1992 ACM SIGPLAN Workshop on Partial Evaluation and Semantics-Directed Program Manipulation, pp. 67-74, San Francisco, June, 1992*. June 1992.
-   Morry Katz. \"Towards a New Perspective on Partial Evaluation: Results, New Ideas, and Future Directions\". Stanford Computer Systems Laboratory. June 1993.
-   Morten Rhiger. \"A Study in Higher-Order Programming Languages\". Masters Thesis. Aarhus University. December 1997.
-   Neil D. Jones and Arne J. Glenstrup. \"Partial Evaluation Termination Analysis and Specialization-Point Insertion\". *Transactions on Programming Languages and Systems*. 2004.
-   Neil D. Jones, Carsten K. Gomard and Peter Sestoft. \"Partial Evaluation and Automatic Program Generation\". 1993.
-   Neil D. Jones. \"An Introduction to Partial Evaluation\". *ACM Computing Surveys*. Vol. 28. No. 3. September 1996.
-   Neil D. Jones. \"MIX Ten Years Later\". *Partial Evaluation and Program Manipulation (PEPM \'95)*. 1995.
-   Neil D. Jones. \"Partial Evaluation and the Generation of Program Generators\". DIKU. D-130. January 1992.
-   Nguyen-Minh Bui. \"Toward abstract profiling\". *2007 Workshop on Scheme and Functional Programming*. September 2007.
-   Nitsan Séniak. \"Compilation de Scheme par spécialisation explicite\". *BIGRE Bulletin*. 65. July 1989.
-   Noel Welsh, Francisco Solsona and Ian Glover. \"SchemeUnit and SchemeQL: Two little languages\". *Workshop on Scheme and Functional Programming (2002)*. October 2002.
-   Oleg Kiselyov and Kirill Lisovsky. \"XML, XPath, XSLT implementations as SXML, SXPath, and SXSLT\". *International Lisp Conference (2002)*. September 2002.
-   Oleg Kiselyov and Shriram Krishnamurthi. \"SXSLT: Manipulation Language for XML\". *Practical Aspects of Declarative Languages (PADL\'03)*. January 2003.
-   Oleg Kiselyov. \"A better XML parser through functional programming\". *Fourth International Symposium on Practical Aspects of Declarative Languages (PADL \'02)*. January 2002.
-   Oleg Kiselyov. \"An applicative-order term rewriting system for code generation, and its termination analysis\". *Eighteenth Annual IEEE Symposium on Logic in Computer Science (LICS 2003)*. June 2003.
-   Oleg Kiselyov. \"Binary parsing\". *A micro-talk presentation at a Workshop on Scheme and Functional Programming 2000*. September 2000.
-   Oleg Kiselyov. \"General ways to traverse collections\". April 2000.
-   Oleg Kiselyov. \"HTML/XML authoring in Scheme\". February 2001.
-   Oleg Kiselyov. \"Implementing Metcast in Scheme\". *Scheme and Functional Programming 2000*. September 2000.
-   Oleg Kiselyov. \"Literate XML/DTD programming\". April 2001.
-   Oleg Kiselyov. \"Monadic Programming in Scheme\". January 2002.
-   Oleg Kiselyov. \"The SXML Specification, Revision 2.5\". September 2002.
-   Oleg Kiselyov. \"Towards the best collection API (extended abstract)\". *Lightweight Languages 2003 (LL3) workshop*. November 2003.
-   Oleg Kiselyov. \"XML and Scheme\". *A micro-talk presentation at a Workshop on Scheme and Functional Programming 2000*. September 2000.
-   Olin Shivers and Brian D. Carlstrom. \"Scsh reference manual\". MIT Laboratory for Computer Science. November 1995.
-   Olin Shivers. \"A Scheme Shell - The design paper on the Scheme shell scsh\". Personal Information Architecture Note 3. April 1994.
-   Olin Shivers. \"A universal scripting framework or Lambda: the ultimate little language\". *Concurrency and Parallelism, Programming, Networking, and Security*. Lecture Notes in Computer Science \#1179. 1996.
-   Olin Shivers. \"CPS data-flow analysis example\". CMU School of Computer Science. May 1990.
-   Olin Shivers. \"Continuations and threads: Expressing machine concurrency directly in advanced languages\". *Proceedings of the Second ACM SIGPLAN Workshop on Continuations*. January 1997.
-   Olin Shivers. \"Control-Flow Analysis of Higher-Order Languages\". PhD. Thesis. Carnegie Mellon University. May 1991.
-   Olin Shivers. \"Control-flow analysis in Scheme\". *Proceedings of the SIGPLAN \'88 Conference on Programming Language Design and Implementation*. June 1988.
-   Olin Shivers. \"Data-flow analysis and type recovery in Scheme\". CMU School of Computer Science. Technical Report CMU-CS-90-115. March 1990.
-   Olin Shivers. \"Super-beta: Copy, constant, and lambda propagation in Scheme\". CMU School of Computer Science. May 1990.
-   Olin Shivers. \"The semantics of Scheme control-flow analysis\". *Proceedings of the First ACM SIGPLAN and IFIP Symposium on Partial Evaluation and Semantics-Based Program Manipulation*. June 1991.
-   Olin Shivers. \"Useless-variable elimination\". *Proceedings of the Workshop on Static Analysis of Equational, Functional and Logic Programs*. April 1990.
-   Olivier Danvy and Andrzej Filinski. \"A Functional Abstraction of Typed Contexts\". DIKU. DIKU Rapport 89/12. July 1989.
-   Olivier Danvy and Andrzej Filinski. \"Abstracting Control\". *1990 ACM Conference on Lisp and Functional Programming*. September 1990.
-   Olivier Danvy and Andrzej Filinski. \"Representing Control: A Study of the CPS Transformation\". Department of Computing and Information Sciences, Kansas State University. CIS-91-2. February 1991.
-   Olivier Danvy and Julia L. Lawall. \"Back to direct style II: First-class continuations\". *1992 ACM Conference on Lisp and Functional Programming*. 1992.
-   Olivier Danvy and Julia L. Lawall. \"Back to direct style II: First-class continuations\". Computer Science Department, Brandeis University. Technical Report CS-95-179. February 1995.
-   Olivier Danvy and Karoline Malmkjær. \"A Blond Primer\". DIKU. DIKU Rapport 88/21. October 1988.
-   Olivier Danvy and Karoline Malmkjær. \"Intensions and Extensions in a Reflective Tower\". *Lisp and Functional Programming (LFP\'88)*. 1988.
-   Olivier Danvy and Mayer Goldberg. \"Partial Evaluation of the Euclidian Algorithm\". *Higher-Order and Symbolic Computing*. Vol. 10. No. 2. July 1997.
-   Olivier Danvy and Morten Rhiger. \"Compiling Actions by Partial Evaluation, Revisited\". Aarhus University. June 1998.
-   Olivier Danvy and René Vestergaard. \"Semantics-Based Compiling: A Case Study in Type-Directed Partial Evaluation\". *PLILP\'96*. 1996.
-   Olivier Danvy and René Vestergaard. \"Semantics-Based Compiling: A Case Study in Type-Directed Partial Evaluation\". University of Aarhus. BRICS 96-13. May 1996.
-   Olivier Danvy and Ulrik Pagh Schultz. \"Lambda-Dropping: Transforming Recursive Equations into Programs with Block Structure\". *Theoretical Computer Science*. Volume 248/1-2. November 2000.
-   Olivier Danvy and Ulrik Pagh Schultz. \"Lambda-Dropping: Transforming Recursive Equations into Programs with Block Structure\". University of Aarhus. RS-97-6. March 1997.
-   Olivier Danvy and Ulrik Pagh Schultz. \"Lambda-Dropping: Transforming Recursive Equations into Programs with Block Structure\". University of Aarhus. RS-99-27. September 1999.
-   Olivier Danvy and Ulrik Pagh Schultz. \"Lambda-dropping: transforming recursive equations into programs with block structure\". *Partial Evaluation and Semantics-Based Program Manipulation (PEPM\'97)*. June 1997.
-   Olivier Danvy, Juergen Koslowski and Karoline Malmkjær. \"Compiling Monads\". Kansas State University. CIS-92-3. December 1991.
-   Olivier Danvy, Karoline Malmkjær and Jens Palsberg. \"Eta-Expansion Does the Trick\". *Transactions on Programming Languages and Systems*. Vol. 18. No. 4. November 1996.
-   Olivier Danvy, Karoline Malmkjær and Jens Palsberg. \"Eta-Expansion Does the Trick\". University of Aarhus. BRICS RS-95-41. November 1995.
-   Olivier Danvy, Karoline Malmkjær and Jens Palsberg. \"The Essence of Eta-Expansion in Partial Evaluation\". *Partial Evaluation and Semantics-Based Program Manipulation (PEPM\'94)*. June 1994.
-   Olivier Danvy. \"Across the Bridge between Reflection and Partial Evaluation\". *Partial Evaluation and Mixed Computation*. 1988.
-   Olivier Danvy. \"Back to Direct Style\". *European Symposium on Programming (ESOP 1992)*. LNCS 582. February 1992.
-   Olivier Danvy. \"Combiner Logiquement en Scheme\". *BIGRE Bulletin*. 65. July 1989.
-   Olivier Danvy. \"Formalizing Implementation Strategies for First-Class Continuations\". *European Symposium on Programming (ESOP 2000)*. LNCS 1782. April 2000.
-   Olivier Danvy. \"Intensional and Extensional Aspects of Partial Evaluation\". Aarhus University. March 1995.
-   Olivier Danvy. \"Memory Allocation and Higher-Order Functions\". *Interpreters and Interpretive Techniques (SIGPLAN\'87)*. June 1987.
-   Olivier Danvy. \"More about Formatting\". Aarhus University. December 1993.
-   Olivier Danvy. \"On listing list prefixes\". *Lisp Pointers*. Vol. 2. No. 3-4. January 1989.
-   Olivier Danvy. \"Online Type-Directed Partial Evaluation\". *Third Fuji International Symposium on Functional and Logic Programming, FLOPS \'98*. April 1998.
-   Olivier Danvy. \"Pragmatics of Type-Directed Partial Evaluation\". *Partial Evaluation: Dagstuhl Seminar*. LNCS 1110. February 1996.
-   Olivier Danvy. \"Programming Techniques for Partial Evaluation\". *Marktoberdorf 1999*. January 2000.
-   Olivier Danvy. \"Programming with Tighter Control\". *BIGRE Bulletin*. 65. July 1989.
-   Olivier Danvy. \"Semantics-Directed Compilation of Non-Linear Patterns\". *Information Processing Letters*. Vol. 37. March 1991.
-   Olivier Danvy. \"Three Steps for the CPS Transformation\". Kansas State University. CIS-92-02. December 1991.-   Olivier Danvy. \"On some Functional Aspects of Control\". *Workshop on the Implementation of Lazy Functional Languages*. October 1988.
-   Olivier Danvy. \"Type-Directed Partial Evaluation\". *Principles of Programming Languages (POPL\'96)*. 1996.
-   Oscar Waddell and R. Kent Dybvig. \"Extending the Scope of Syntactic Abstraction\". *Conference Record of POPL\'99: The 26th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages*. January 1999.
-   Oscar Waddell and R. Kent Dybvig. \"Fast and Effective Procedure Inlining\". *Proceedings of the Fourth International Symposium on Static Analysis (SAS \'97)*. 1302. September 1997.
-   Oscar Waddell and R. Kent Dybvig. \"Visualizing partial evaluation\". *ACM Computing Surveys Symposium on Partial Evaluation*. 30(3es):24-es. September 1998.
-   Oscar Waddell, Dipanwita Sarkar and R. Kent Dybvig. \"Robust and effective transformation of letrec\". *Workshop on Scheme and Functional Programming (2002)*. October 2002.
-   Paul A. Steckler. \"Component Support in PLT Scheme\". *Software Practice and Experience*. 32. 10. 2002.
-   Paul A. Steckler. \"Component support for PLT Scheme\". *Scheme and Functional Programming 2000*. September 2000.
-   Paul A. Steckler. \"MysterX: A Scheme Toolkit for Building Interactive Applications with COM\". *Proceedings of TOOLS 99*. 1999.
-   Paul Haahr. \"Montage: Breaking Windows into Small Pieces\". *Summer 1990 Usenix Conference*. 1990.
-   Paul R. Wilson, Michael S. Lam and Thomas G. Moher. \"Caching Considerations for Generational Garbage Collection\". *1992 ACM Symposium on Lisp and Functional Programming*. June 1992.
-   Paul R. Wilson. \"Uniprocessor Garbage Collection Techniques\".
-   Paul T. Graunke and Shriram Krishnamurthi. \"Advanced Control Flows for Flexible Graphical User Interfaces\". *International Conference on Software Engineering*. 2002.
-   Paul T. Graunke, Robert Bruce Findler, Shriram Krishnamurthi, Matthias Felleisen. \"Automatically Restructuring Programs for the Web\". *IEEE International Symposium on Automated Software Engineering (ASE 2001)*. 2001.
-   Paul T. Graunke, Robert Bruce Findler, Shriram Krishnamurthi, Matthias Felleisen. \"Modeling Web Interactions\". *European Symposium on Programming (ESOP)*. April 2003.
-   Paul T. Graunke, Shriram Krishnamurthi, Van der Hoeven and Matthias Felleisen. \"Programming the Web with High-Level Programming Languages\". *European Symposium on Programming (ESOP 2001)*. 2001.
-   Paul T. Graunke. \"Web Interactions\". PhD. Thesis. Northeastern University. 2003.
-   Pavel Curtis and James Rauen. \"A Module System for Scheme\". *Proceedings of the 1990 ACM Conference on Lisp and Functional Programming*. June 1990.
-   Pedro Pinto. \"Dot-Scheme: A PLT Scheme FFI for the .NET framework\". *Scheme Workshop 2003*. November 2003.
-   Pee Hong Chen and Daniel P. Friedman. \"Prototyping Data Flow by Translation Into Scheme\". Indiana University. Computer Science Technical Report 147. August 1983.
-   Pee Hong Chen and L. David Sabbagh. \"Scheme as an Interactive Graphics Programming Environment\". Indiana University. Computer Science Technical Report No. 166. March 1985.
-   Pee Hong Chen, W. Y. Chi, Eric M. Ost, L. David Sabbagh and George Springer. \"Scheme Graphics Reference Manual\". Indiana University. Computer Science Technical Report No. 145. August 1983.
-   Per Bothner. \"Kawa - Compiling Dynamic Languages to the Java VM\". *1998 Usenix*. June 1998.
-   Per Bothner. \"Kawa: Compiling Scheme to Java\". *Lisp Users Conference: Lisp in the Mainstream (40th Anniversary of Lisp)*. November 1998.
-   Pete Tinker and Morry Katz. \"Parallel execution of sequential scheme with ParaTran\". *1988 ACM conference on LISP and functional programming*. 1988.
-   Peter A. Bigot and Saumya Debray. \"Return Value Placement and Tail Call Optimization in High Level Languages\". *Journal of Logic Programming*. January 1999.
-   Peter Lee and Uwe F. Pleban. \"On the use of LISP in implementing denotational semantics\". *Proceedings of the 1986 ACM conference on LISP and functional programming*. 1986.
-   Peter Thiemann and Dirk Dussart. \"Partial Evaluation for Higher-Order Languages with State\". July 1999.
-   Peter Thiemann and Michael Sperber. \"Polyvariant Expansion and Compilergenerators\". *PSI-96: Andrei Ershov Second International Memorial Conference, Perspectives of System Informatics*. June 1996.
-   Peter Thiemann and Robert Glück. \"The Generation of a Higher-Order Online Partial Evaluator\". *Fuji Workshop on Functional and Logic Programming*. July 1995.
-   Peter Thiemann. \"Aspects of the PGG System: Specialization for Standard Scheme\". *Partial Evaluation: Practice and Theory (DIKU International Summer School 1998)*. LNCS 1706. June 1998.
-   Peter Thiemann. \"Cogen in Six Lines\". *Proc. ACM SIGPLAN International Conference on Functional Programming 1996*. May 1996.
-   Peter Thiemann. \"Compiling Adaptive Programs by Partial Evaluation\". *CC 2000*. volume 1781 of Lecture Notes in Computer Science. March 2000.
-   Peter Thiemann. \"Higher-Order Code Splicing\". *European Symposium on Programming, ESOP \'99*. volume 1576 of Lecture Notes in Computer Science. March 1999.
-   Peter Thiemann. \"Implementing Memoization for Partial Evaluation\". *Programming Languages, Implementations, Logics, and Programs (PLILP \'96)*. volume 1140 of Lecture Notes in Computer Science. September 1996.
-   Peter Thiemann. \"The PGG System - User Manual\". University at Freiburg. March 2000.
-   Peter Thiemann. \"Towards Partial Evaluation of Full Scheme\". *Reflection\'96*. April 1996.
-   Peter Walton Hopkins. \"Enabling Complex UI In Web Applications With send/suspend/dispatch\". *Scheme Workshop 2003*. November 2003.
-   Peter Ørbæk. \"POPE: An On-line Partial Evaluator\". University of Aarhus. June 1994.
-   Philippe Meunier and Daniel Silva. \"From Python to PLT Scheme\". *Scheme Workshop 2003*. November 2003.
-   Philippe Meunier, Robert Bruce Findler and Matthias Felleisen. \"Modular Set-Based Analysis from Contracts\". *Principles of Programming Languages, POPL 2006*. January 2006.
-   Philippe Meunier, Robert Bruce Findler, Paul A. Steckler, Mitchell Wand. \"Selectors Make Set-Based Analysis Too Hard\". *2nd Workshop on Scheme and Functional Programming*. September 2001.
-   Pierre Bonzon. \"A Metacircular Evaluator for a Logical Extension of Scheme\". *Lisp and Symbolic Computation: An International Journal*. 3. 2. March 1990.
-   Pieter H. Hartel, Marc Feeley, Martin Alt, Lennart Augustsson, Peter Baumann, Marcel Beemster, Emmanuel Chailloux, Christine H. Flood, Wolfgang Grieskamp, John H. G. Van Groningen, Kevin Hammond, Bogumil Hausman, Melody Y. Ivory, Richard E. Jones, Jasper Kamperman, Peter Lee, Xavier Leroy, Rafael D. Lins, Sandra Loosemore, Niklas Röjemo, Manuel Serrano, Jean-Pierre Talpin, Jon Thackray, Stephen Thomas, Pum Walters, Pierre Weis, Peter Wentworth. \"Benchmarking Implementations of Functional Languages with \`\`Pseudoknot\'\' a Float-Intensive Benchmark\". *Journal of Functional Programming*. Vol. 6, No. 4. 1996.
-   R. Kent Dybvig and Robert Hieb. \"Continuations and Concurrency\". *Proceedings of the Second ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming*. March 1990.
-   R. Kent Dybvig and Robert Hieb. \"Engines from Continuations\". *Journal of Computer Languages*. 14, 2. 1989.
-   R. Kent Dybvig, Daniel P. Friedman, and Michael Y. Levin. \"Implementation strategies for Scheme-based Prolog systems\". 1998.
-   R. Kent Dybvig, David Eby and Carl Bruggeman. \"Don\'t Stop the BiBOP: Flexible and Efficient Storage Management for Dynamically-Typed Languages\". Indiana University. technical report \#400. March 1994.
-   R. Kent Dybvig, David Eby and Carl Bruggeman. \"Guardians in a Generation-based Collector\". *ACM SIGPLAN 1993 Conference on Programming Language Design and Implementation*. June 1993.
-   R. Kent Dybvig, Robert Hieb and Tom Butler. \"Destination-Driven Code Generation\". Indiana University Computer Science Department. Technical Report \#302. February 1990.
-   R. Kent Dybvig. \"C-Scheme\". Masters Thesis. Indiana University Computer Science Department. Technical Report 149. 1983.
-   R. Kent Dybvig. \"Three Implementation Models for Scheme\". PhD. Thesis. University of North Carolina, Computer Science Department. Technical Report 87-011. April 1987.
-   Rajeev J. Surati. \"A Parallelizing Compiler Based on Partial Evaluation\". Massachusetts Institute of Technology. AITR-1377. July 1993.
-   Rajeev J. Surati. \"Practical Partial Evaluation\". Masters Thesis. Massachussets Institute of Technology. May 1995.
-   Ray Rischpater. \"Scheme for Client-Side Scripting in Mobile Web Browsing, or AJAX-Like Behavior Without Javascript\". *2006 Workshop on Scheme and Functional Programming*. September 2006.
-   Remzi Emre Başar, Caner Derici and Çağdaş Şenol. \"World With Web: A compiler from world applications to JavaScript\". *2009 Workshop on Scheme and Functional Programming*. August 2009.
-   René Vestergaard. \"From Proof Normalization to Compiler Generation and Type-Directed Change-of-Representation\". Masters Thesis. Aarhus University. 1997.
-   Rex A. Dwyer and R. Kent Dybvig. \"A SCHEME for Distributed Processes\". Indiana University. Computer Science Department Technical Report 107. April 1981.
-   Richard A. Kelsey and Jonathan A. Rees. \"A tractable Scheme implementation\". *Lisp and Symbolic Computation*. 7(4). 1994.
-   Richard A. Kelsey and Jonathan A. Rees. \"Modules (in \'The Incomplete Scheme48 Reference Manual for release 0.57\')\". 2001.
-   Richard A. Kelsey and Paul Hudak. \"Realistic Compilation by Program Transformation\". *Principles of Programming Languages (POPL89)*. January 1989.
-   Richard A. Kelsey. \"Tail-Recursive Stack Disciplines for an Interpreter\".
-   Richard Cleis and Keith Wilson. \"Experiences with Scheme in an Electro-Optics Laboratory\". *2006 Workshop on Scheme and Functional Programming*. September 2006.
-   Richard Schooler and James W. Stamos. \"Proposal For a Small Scheme Implementation\". Massachusetts Institute of Technology. MIT LCS Memo TM-267. October 1984.
-   Richard Schooler. \"Partial Evaluation as a Means of Language Extensibility\". Masters Thesis. Massachusetts Institute of Technology. MIT/LCS/TR-324. August 1984.
-   Robert Bruce Findler and Matthew Flatt. \"Modular Object-Oriented Programming with Units and Mixins\". *Proceedings of ICFP 98*. 1998.
-   Robert Bruce Findler, Cormac Flanagan, Matthew Flatt, Shriram Krishnamurthi and Matthias Felleisen. \"DrScheme: A Pedagogic Programming Environment for Scheme\". *International Symposium on Programming Languages: Implementations, Logics, and Programs (PLILP 97)*. 1997.
-   Robert Bruce Findler, John Clements, Cormac Flanagan, Matthew Flatt, Shriram Krishnamurthi, Paul A. Steckler and Matthias Felleisen. \"DrScheme: A Programming Environment for Scheme\". *Journal of Functional Programming*. 2002.
-   Robert Bruce Findler, Matthew Flatt. \"Slideshow: Functional Presentations\". *International Conference on Functional Programming (ICFP2004)*. 2004.
-   Robert Cartwright and Matthias Felleisen. \"Program Verification through Soft Typing\". *Computing Surveys*. 1996.
-   Robert Cartwright and Mike Fagan. \"Soft Typing\". *Proceedings of PLDI 91*. 1991.
-   Robert G. Burger and R. Kent Dybvig. \"An infrastructure for profile-driven dynamic recompilation\". *IEEE Computer Society 1998 International Conference on Computer Languages*. May 1998.
-   Robert G. Burger and R. Kent Dybvig. \"Printing Floating Point Numbers Quickly and Accurately\". *ACM SIGPLAN 1996 Conference on Programming Language Design and Implementation*. June 1996.
-   Robert G. Burger, Oscar Waddell and R. Kent Dybvig. \"Register Allocation Using Lazy Saves, Eager Restores, and Greedy Shuffling\". *ACM SIGPLAN 1995 Conference on Programming Language Design and Implementation*. June 1995.
-   Robert G. Burger. \"Efficient Compilation and Profile-Driven Dynamic Recompilation in Scheme\". PhD. Thesis. Indiana University Computer Science Department. March 1997.
-   Robert G. Burger. \"The Scheme Machine\". Indiana University, Computer Science Department. Technical Report 413. August 1994.
-   Robert Glück and A. V. Klimov. \"Occam\'s Razor in Metacomputation: the Notion of a Perfect Process Tree\". *Static Analysis 1993*. 1993.
-   Robert Glück and Jesper Jørgensen. \"An Automatic Program Generator for Multi-Level Specialization\". *Higher-Order and Symbolic Computing*. Vol. 10. No. 2. July 1997.
-   Robert Glück and Jesper Jørgensen. \"Efficient Multi-Level Generating Extensions for Program Specialization\". *Programming Languages: Implementations, Logics and Programs (PLILP\'95)*. 1995.
-   Robert Glück and Jesper Jørgensen. \"Fast Binding-Time Analysis for Multi-Level Specialization\". *Perspectives of System Informatics*. 1996.
-   Robert Glück and Jesper Jørgensen. \"Fast Binding-Time Analysis for Multi-Level Specialization\". *Perspectives of System Informatics*. LNCS 1181. 1996.
-   Robert Glück and Jesper Jørgensen. \"Generating Optimizing Specializers\". *IEEE International Conference on Computer Languages*. 1994.
-   Robert Glück and Jesper Jørgensen. \"Generating Transformers for Deforestation and Supercompilation\". *Static Analysis 1994*. 1994.
-   Robert Glück and Jesper Jørgensen. \"Multi-Level Specialization (Extended Abstract)\". *Partial Evaluation - Practice and Theory, DIKU 1998 International Summer School*. LNCS 1706. June 1998.
-   Robert Glück and Jesper Jørgensen. \"Multi-Level Specialization (Extended Abstract)\". *Partial Evaluation: Practice and Theory 1998*. 1998.
-   Robert Glück and Neil D. Jones. \"Automatic program specialization by partial evaluation: an introduction\". *Software Engineering in Scientific Computing*. 1996.
-   Robert Glück, John Hatcliff and Jesper Jørgensen. \"Generalization in Hierarchies of Online Program Specialization Systems\". *Logic-Based Program Synthesis and Transformation 1999*. 1999.
-   Robert Glück, Y. Kawada and T. Hashimoto. \"Transforming Interpreters into Inverse Interpreters by Partial Evaluation\". *Partial Evaluation and Semantics-Based Program Manipulation (PEPM 2003)*. 2003.
-   Robert H. Halstead and J. Loaiza. \"Exception handling in Multilisp\". *1985 Int. Conf. Parallel Processing*. August 1985.
-   Robert H. Halstead. \"Implementation of multilisp: Lisp on a multiprocessor\". *Proceedings of the 1984 ACM Symposium on LISP and functional programming*. 1984.
-   Robert H. Halstead. \"Overview of concert multilisp: a multiprocessor symbolic computing system\". 15. 1. March 1987.
-   Robert Hieb, R. Kent Dybvig and Carl Bruggeman. \"Representing Control in the Presence of First-Class Continuations\". *ACM SIGPLAN 1990 Conference on Programming Language Design and Implementation*. June 1990.
-   Robert Hieb, R. Kent Dybvig and Claude W. Anderson III. \"Subcontinuations\". *Lisp and Symbolic Computation*. 7, 1. January 1994.
-   Robert Strandh. \"OOOZ, A multi-User Programming Environment Based on Scheme\". *BIGRE Bulletin*. 65. July 1989.
-   Ronald Garcia and Andrew Lumsdaine. \"Type Classes Without Types\". *2005 Workshop on Scheme and Functional Programming*. September 2005.
-   Ryan Culpepper, Sam Tobin-Hochstadt and Matthew Flatt. \"Advanced Macrology and the Implementation of Typed Scheme\". *2007 Workshop on Scheme and Functional Programming*. September 2007.
-   Sanjeev Kumar, Carl Bruggeman and R. Kent Dybvig. \"Threads Yield Continuations\". *Lisp and Symbolic Computation*. 10, 2. May 1998.
-   Saumya Debray, Robert Muth and Scott Watterson. \"Link-time Improvement of Scheme Programs\". *International Conference on Compiler Construction (CC\'99)*. March 1999.
-   Saumya Debray. \"Resource-bounded partial evaluation\". *Partial Evaluation and Semantics-Based Program Manipulation (PEPM\'97)*. June 1997.
-   Saumya Debray. \"Resource-bounded partial evaluation\". University of Arizona. January 1998.
-   Scott Draves. \"Automatic Program Specialization for Interactive Media\". PhD. Thesis. Carnegie Mellon University.
-   Scott Draves. \"Compiler Generation for Interactive Graphics using Intermediate Code\". *Partial Evaluation: Dagstuhl Seminar*. LNCS 1110. February 1996.
-   Scott G. Miller. \"SISC: A Complete Scheme Interpreter in Java\". January 2002.
-   Scott Owens, Matthew Flatt, Olin Shivers and Benjamin McMullan. \"Lexer and Parser Generators in Scheme\". *2004 Scheme Workshop*. September 2004.
-   Sebastian Egner. \"Eager Comprehensions in Scheme: The design of SRFI-42\". *2005 Workshop on Scheme and Functional Programming*. September 2005.
-   Sho-Huan Simon Tung and R. Kent Dybvig. \"Reliable Interactive Programming with Modules\". *Lisp and Symbolic Computation*. 9, 4. December 1996.
-   Sho-Huan Simon Tung. \"Interactive Modular Programming in Scheme\". *Proceedings of the 1992 ACM Conference on Lisp and Functional Programming*. June 1992.
-   Sho-Huan Simon Tung. \"Merging Interactive, Modular and Object-Oriented Programming\". PhD. Thesis. Computer Science Department, Indiana University. TR-349. March 1992.
-   Shriram Krishnamurthi, Kathryn E. Gray and Paul T. Graunke. \"Transformation-by-Example for XML\". *Practical Aspects of Declarative Languages (PADL 2000)*. 2000.
-   Shriram Krishnamurthi, Robert Bruce Findler, Paul Graunke and Matthias Felleisen. \"Modeling Web Interactions and Errors\". *Interactive Computation: The New Paradigm*. 2005.
-   Shriram Krishnamurthi. \"Automata as Macros\". *Journal of Functional Programming*. 2005.
-   Shriram Krishnamurthi. \"The Continue Server (or, How I Administered PADL 2002 and 2003)\". *Practical Aspects of Declarative Languages (PADL\'03)*. January 2003.
-   Simon Helsen and Peter Thiemann. \"Fragmental Specialization\". *Semantics, Applications and Implementation of Program Generation (SAIG\'00)*. volume 1927 of Lecture Notes in Computer Science. September 2000.
-   Simon Helsen and Peter Thiemann. \"Two Flavors of Offline Partial Evaluation\". *Asian Computing Science Conference, ASIAN\'98*. December 1998.
-   Simon M. Kaplan and Joseph P. Loyall. \"GARP/Scheme: Implementing a Concurrent, Object-Based Language\". *BIGRE Bulletin*. 65. July 1989.
-   Stanley Jefferson and Daniel P. Friedman. \"A Simple Reflective Interpreter\". Computer Science Department, Indiana University. September 1992.
-   Stephen Paul Carl. \"A Framework for Memory-Management Experimentation\". *2004 Scheme Workshop*. September 2004.
-   Steven D. Johnson. \"Formal derivation of a scheme computer\". Indiana University Computer Science Department. Technical Report 544. September 2000.
-   Steven E. Ganz and Daniel P. Friedman. \"A Modular Monadic Interpreter In Scheme With Objects\". Indiana University Computer Science Department. Technical Report \#548. October 2000.
-   Steven E. Ganz, Daniel P. Friedman and Mitchell Wand. \"Trampolined Style\". *International Conference on Functional Programming (ICFP 99)*. September 1999.
-   Steven L. Jenkins and Gary T. Leavens. \"Ploymorphic Type-Checking in Scheme\". *Journal of Computer Languages*. Vol. 22. Num. 4. 1996.
-   Steven R. Vegdahl and Uwe F. Pleban. \"The Runtime Environment for Screme, a Scheme Implementation on the 88000\". *Proceedings of the Third International Conference on Architectural Support for Programming Languages and Operating Systems*. April 1989.
-   Stéphane Epardaud. \"Mobile Reactive Programming in ULM\". *2004 Scheme Workshop*. September 2004.
-   Suresh Jagannathan and Andrew K. Wright. \"Compiling with Flow Analysis\". *ACM Computing Surveys*. June 1996.
-   Suresh Jagannathan and Andrew K. Wright. \"Effective Flow Analysis for Avoiding Runtime Checks\". *2nd International Static Analysis Symposium*. LNCS 983. September 1995.
-   Suresh Jagannathan and Andrew K. Wright. \"Flow-Directed Inlining\". *ACM Symposium on Programming Language Design and Implementation (PLDI96)*. May 1996.
-   Suresh Jagannathan and Andrew K. Wright. \"Polymorphic Splitting: An Effective Polyvariant Flow Analysis\". *ACM Transactions on Programming Languages and Systems*. March 1998.
-   Suresh Jagannathan and Gul Agha. \"A Reflective Model of Inheritance\". *European Conference on Object-Oriented Programming (ECOOP 92)*. LNCS 615. June 1992.
-   Suresh Jagannathan, Henry Cejtin, Richard A. Kelsey. \"Higher-Order Distributed Objects\". *ACM Transactions on Programming Languages and Systems*. September 1995.
-   Suresh Jagannathan, James Philbin. \"A Customizable Substrate for Concurrent Languages\". *ACM Conference on Programming Language Design and Implementation (PLDI92)*. June 1992.
-   Suresh Jagannathan, James Philbin. \"A Foundation for an Efficient Multi-Threaded Scheme System\". *ACM Conference on Lisp and Functional Programming (LFP92)*. June 1992.
-   Suresh Jagannathan, James Philbin. \"High-Level Abstractions for Efficient Concurrent Systems\". *International Conference on Programming Languages and Systems Architecture*. Springer-Verlag LNCS 782. March 1994.
-   Suresh Jagannathan, Stephen Weeks and James Philbin. \"A Concurrent Abstract Interpreter\". *Lisp and Symbolic Computation*. April 1994.
-   Suresh Jagannathan, Stephen Weeks. \"Analyzing Stores and References in Parallel Symbolic Languages\". *ACM Symposium on Lisp and Functional Programming (LFP94)*. June 1994.
-   Suresh Jagannathan. \"Communication-Passing Style for Coordination Languages\". *2nd International Conference on Coordination Models and Languages*. Springer-Verlag LNCS 1282. September 1997.
-   Suresh Jagannathan. \"Customization of First-Class Tuple-Spaces in a Higher-Order Language\". *Parallel Languages and Architectures*. LNCS 506. June 1991.
-   Suresh Jagannathan. \"Dynamic Modules in Higher-Order Languages\". *IEEE International Conference on Computer Languages*. May 1994.
-   Suresh Jagannathan. \"Expressing Fine-Grained Parallelism Using Distributed Data Structures\". *Workshop on Research Directions in High-Level Parallel Languages*. Springer-Verlag LNCS 574. June 1991.
-   Suresh Jagannathan. \"Locality Abstractions for Parallel and Distributed Computing\". *International Conference on Theory and Practice of Parallel Programming*. Springer-Verlag LNCS 907. November 1994.
-   Suresh Jagannathan. \"Meta-Level Building Blocks for Modular Systems\". *ACM Transactions on Programming Languages and Systems*. May 1994.
-   Suresh Jagannathan. \"Optimizing Analysis for First-Class Tuple-Spaces\". *3rd Workshop on Parallel Languages and Compilers*. August 1990.
-   Suresh Jagannathan. \"Reflective Building Blocks for Modular Systems\". *International Workshop on Reflection and Meta-Level Architectures*. November 1992.
-   Suresh Jagannathan. \"TS-Scheme: Distributed Data Structures in Lisp\". *Lisp and Symbolic Computation*. December 1994.
-   Suresh Jagannathan. \"Virtual Topologies: A New Concurrency Abstraction for High-Level Parallel Programs\". *5th Workshop on Languages and Compilers for Parallel Computing*. September 1995.
-   Tan Gon Kim and Bernard P. Zeigler. \"The DEVS-Scheme Modelling and Simulation Environment\". *BIGRE Bulletin*. 65. July 1989.
-   Tanel Tammet. \"Lambda-lifting as an optimization for compiling Scheme to C\". Chalmers University of Technology.
-   Timothy J. Hickey, J. Langton and R. Alterman. \"Integrating Tools and Resources: a case study in building educational groupware for collaborative programming\". Brandeis University. 2003.
-   Timothy J. Hickey, Peter Norvig and Kenneth R. Anderson. \"LISP - a Language for Internet Scripting and Programming\". *LUGM\'98: Proceedings of Lisp in the Mainstream*. November 1998.
-   Timothy J. Hickey, R. Alterman, J. Langton. \"TA Groupware\". Brandeis University. Tech. Rep. CS-02-222. January 2002.
-   Timothy J. Hickey. \"Incorporating Scheme-based Web Programmming into Computer Literacy Courses\". Brandeis University. CS-02-224. April 2002.
-   Timothy J. Hickey. \"Incorporating Scheme-based web programming in computer-literacy courses\". *Workshop on Scheme and Functional Programming (2002)*. October 2002.
-   Timothy J. Hickey. \"Jscheme Web Programming for CS0\". Brandeis University. CS-02-223. January 2002.
-   Timothy J. Hickey. \"Scheme-based Web Programming as a Basis for a CS0 Curriculum\". September 2003.
-   Torben Amtoft, Charles Consel, Olivier Danvy and Karoline Malmkjær. \"The Abstraction and Instantiation of String-Matching Programs\". University of Aarhus. RS-01-12. April 2001.
-   Torben Æ. Mogensen. \"Gödelization in the untyped lambda calculus\". *Partial Evaluation and Semantics-Based Program Manipulation (PEPM99)*. January 1999.
-   Ulrik Pagh Schultz. \"Explicit and Implicit Aspects of Scope and Block Structure\". Masters Thesis. University of Aarhus. June 1997.
-   Uwe F. Pleban. \"Compilation Issues in the Screme Implementation for the 88000\". *Topics in Advanced Language Implementation*. 1991.
-   Vincent Delacour. \"Picolo Expresso\". *BIGRE Bulletin*. 65. July 1989.
-   Vincent St-Amour, Lysiane Bouchard and Marc Feeley. \"Small Scheme Stack: a Scheme TCP/IP stack targeting small embedded applications\". *2008 Workshop on Scheme and Functional Programming*. September 2008.
-   Vipin Swarup, William M. Farmer, Joshua D. Guttman, Leonard G. Monk and John D. Ramsdell. \"The VLISP Image Builder\". MITRE Corporation. September 1992.
-   Vipin Swarup, William M. Farmer, Joshua D. Guttman, Leonard G. Monk, John D. Ramsdell. \"VLISP Byte Code Interpreter\". MITRE Corporation. September 1992.
-   W. F. Wong. \"Optimizing Floating Point Operations in Scheme\". *Journal of Computer Languages*. Vol. 25. 1999.
-   William D Clinger and Felix S. Klock II. \"Scalable Garbage Collection with Guaranteed MMU\". *2009 Workshop on Scheme and Functional Programming*. August 2009.
-   William D. Clinger and Lars Thomas Hansen. \"Lambda, the ultimate label, or a simple optimizing compiler for Scheme\". *Proceedings of the 1994 ACM conference on LISP and Functional Programming*. 1994.
-   William D. Clinger, Anne Hartheimer and Eric M. Ost. \"Implementation strategies for continuations\". *Proceedings of the 1988 ACM conference on LISP and functional programming*. July 1988.
-   William D. Clinger, Anne Hartheimer and Eric M. Ost. \"Implementation strategies for continuations\". Vol. 12. No. 1. 1999.
-   William D. Clinger. \"How to read floating point numbers accurately\". *Proceedings of the conference on Programming language design and implementation*. June 1990.
-   William D. Clinger. \"Rapid Case Dispatch in Scheme\". *2006 Workshop on Scheme and Functional Programming*. September 2006.
-   William D. Clinger. \"The scheme 311 compiler an exercise in denotational semantics\". *1984 ACM Symposium on LISP and functional programming*. 1984.
-   William E. Byrd and Daniel P. Friedman. \"From Variadic Functions to Variadic Relations: A miniKanren Perspective\". *2006 Workshop on Scheme and Functional Programming*. September 2006.
-   William E. Byrd and Daniel P. Friedman. \"lpha Kanren - A Fresh Name in Nominal Logic Programming\". *2007 Workshop on Scheme and Functional Programming*. September 2007.
-   William M. Farmer and John D. Ramsdell. \"A Verifed Compiler for Multithreaded PreScheme\". MITRE Corporation. January 1996.
-   William M. Farmer, Joshua D. Guttman, Leonard G. Monk, John D. Ramsdell, Vipin Swarup. \"Faithfulness of the VLISP Operational Semantics\". MITRE Corporation. September 1992.
-   William M. Farmer, Joshua D. Guttman, Leonard G. Monk, John D. Ramsdell, Vipin Swarup. \"The VLISP Linker\". MITRE Corporation. September 1992.
-   Williams Ludwell Harrison III. \"The Interprocedural Analysis and Automatic Parallellization of Scheme Programs\". *Lisp and Symbolic Computation: An International Journal*. 2. 3/4. October 1989.
-   Wim Vanderbauwhede. \"Gannet: a Scheme for Task-level Reconfiguration of Service-based Systems-on-Chip\". *2007 Workshop on Scheme and Functional Programming*. September 2007.
-   Wing-Yee Au, Daniel Weise and Scott Seligman. \"Generating Compiled Simulations Using Partial Evaluation\". *28th Design Automation Conference*. June 1991.
-   Xavier Saint-Mleux, Marc Feeley and Jean-Pierre David. \"SHard: a Scheme to Hardware Compiler\". *2006 Workshop on Scheme and Functional Programming*. September 2006.
-   Yannis Bres and Bernard Serpette and Manuel Serrano. \"Bigloo.NET: compiling Scheme to .NET CLR\". *Journal of Object Technology*. 3(9). October 2004.
-   Yannis Bres and Bernard Serpette and Manuel Serrano. \"Compiling Scheme programs to .NET Common Intermediate Language\". *2nd International Workshop on .NET Technologies*. May 2004.

@Misc{SaF:1992a,
  author =       "Amr Sabry and Matthias Felleisen",
  title =        "Reasoning about Programs in Continuation-Passing
                 Style",
  note =         "Proceedings of LFP 92.",
  year =         "1992",
}

@Misc{SaF:1992b,
  author =       "Amr Sabry and Matthias Felleisen",
  title =        "Reasoning about Programs in Continuation-Passing
                 Style",
  note =         "Rice University. TR 92-180.",
  year =         "1992",
}

@Misc{SaF:1993a,
  author =       "Amr Sabry and Matthias Felleisen",
  title =        "Reasoning about Programs in Continuation-Passing
                 Style",
  note =         "LISP and Symbolic Computation.",
  year =         "1993",
}

@Misc{SaF:1994a,
  author =       "Amr Sabry and Matthias Felleisen",
  title =        "Is Continuation-Passing Useful for Data Flow
                 Analysis?",
  note =         "Proceedings of PLDI 94.",
  year =         "1994",
}

@Misc{ScT:2011a,
  author =       "Christophe Scholliers and Eric Tanter and Wolfgang De
                 Meuter",
  title =        "Computational Contracts",
  note =         "2011 Workshop on Scheme and Functional Programming.",
  month =        oct,
  year =         "2011",
}

@Misc{Se:1999a,
  author =       "Manuel Serrano",
  title =        "Wide Classes",
  note =         "European Conference on Object-Oriented Programming,
                 ECOOP'99.",
  month =        jun,
  year =         "1999",
}

@Misc{Sh:2001a,
  author =       "Olin Shivers",
  title =        "{History of T}",
  year =         "2001",
  URL =          "http://www.paulgraham.com/thist.html",
}

@Misc{SiF:1990a,
  author =       "Dorai Sitaram and Matthias Felleisen",
  title =        "Control Delimiters and Their Hierarchies",
  note =         "Lisp and Symbolic Computation: An International
                 Journal. 3. 1.",
  month =        jan,
  year =         "1990",
}

@Misc{SiT:2006a,
  author =       "Jeremy G. Siek and Walid Taha",
  title =        "Gradual Typing for Functional Languages",
  note =         "2006 Workshop on Scheme and Functional Programming.",
  month =        sep,
  year =         "2006",
}

@Book{Sl:1987a,
  author =       "Stephen Slade",
  title =        "{The T Programming Language: A Dialect of LISP}",
  publisher =    "Prentice-Hall",
  year =         "1987",
}

@Misc{SM:1985a,
  title =        "MacScheme Reference Manual",
  note =         "Semantic Microsystems.",
  year =         "1985",
}

@Misc{SrO:1985a,
  author =       "Amitabh Srivastava and Don Oxley and Aditya
                 Srivastava",
  title =        "An (other) Integration of Logic and Functional
                 Programming",
  note =         "Proceedings of the Symposium on Logic Programming.",
  year =         "1985",
}

@TechReport{St:1976a,
  title =        "{LAMBDA: The Ultimate Declarative}",
  author =       "Guy Lewis {Steele Jr.}",
  institution =  inst-MIT,
  type =         "AI Memos",
  number =       "AIM-379",
  year =         "1976",
  month =        nov,
  URL =          "https://hdl.handle.net/1721.1/6091",
}

@InProceedings{St:1977a,
  author =       "Guy Lewis {Steele Jr.}",
  title =        "{Debunking the ``Expensive Procedure Call'' Myth, or
                 Procedure Call Implementations Considered Harmful, or
                 LAMBDA, the Ultimate GOTO}",
  booktitle =    "Proceedings of the Annual Conference",
  year =         "1977",
  ISBN =         "978-1-4503-3921-6",
  series =       "ACM",
  pages =        "153--162",
  URL =          "https://dl.acm.org/doi/10.1145/800179.810196",
  doi =          "10.1145/800179.810196",
}

@TechReport{St:1977b,
  title =        "{Debunking the ``Expensive Procedure Call'' Myth, or,
                 Procedure Call Implementations Considered Harmful, or,
                 LAMBDA: The Ultimate GOTO}",
  author =       "Guy Lewis {Steele Jr.}",
  institution =  inst-MIT,
  type =         "AI Memos",
  number =       "AIM-443",
  year =         "1977",
  month =        oct,
  URL =          "https://hdl.handle.net/1721.1/5753",
}

@MastersThesis{St:1978a,
  title =        "{RABBIT: A Compiler for SCHEME}",
  author =       "Guy Lewis {Steele Jr.}",
  school =       inst-MIT,
  year =         "1978",
  month =        may,
  URL =          "https://hdl.handle.net/1721.1/5753",
}

@Article{St:1980a,
  author =       "Guy Lewis {Steele Jr.}",
  title =        "{Compiler Optimization Based on Viewing LAMBDA as
                 RENAME + GOTO}",
  journal =      "AI: An MIT Perspective",
  year =         "1980",
}

@InProceedings{StG:1993a,
  author =       "Guy Lewis {Steele Jr.} and Richard P. Gabriel",
  title =        "The Evolution of Lisp",
  booktitle =    proc-HOPL,
  year =         "1993",
  ISBN =         "978-0-89791-570-0",
  series =       "HOPL",
  pages =        "231--270",
  URL =          "https://dl.acm.org/doi/10.1145/154766.155373",
  doi =          "10.1145/154766.155373",
}

@Article{StG:1993b,
  author =       "Guy Lewis {Steele Jr.} and Richard P. Gabriel",
  title =        "The Evolution of Lisp",
  journal =      j-SIGPLAN-NOTICES,
  year =         "1993",
  volume =       "28",
  number =       "3",
  pages =        "231--270",
  month =        mar,
  URL =          "https://dl.acm.org/doi/10.1145/155360.155373",
  doi =          "10.1145/155360.155373",
}

@TechReport{StS:1976a,
  title =        "{LAMBDA: The Ultimate Imperative}",
  author =       "Guy Lewis {Steele Jr.} and Gerald Jay Sussman",
  institution =  inst-MIT,
  type =         "AI Memos",
  number =       "AIM-353",
  year =         "1976",
  month =        mar,
  URL =          "https://hdl.handle.net/1721.1/5790",
}

@TechReport{StS:1978a,
  title =        "{The Art of the Interpreter of the Modularity Complex
                 (Parts Zero, One, and Two)}",
  author =       "Guy Lewis {Steele Jr.} and Gerald Jay Sussman",
  institution =  inst-MIT,
  type =         "AI Memos",
  number =       "AIM-453",
  year =         "1978",
  month =        may,
  URL =          "https://hdl.handle.net/1721.1/6094",
}

@Misc{StS:1978b,
  author =       "Guy Lewis {Steele Jr.} and Gerald Jay Sussman",
  title =        "The Revised Report on Scheme, a Dialect of Lisp",
  note =         "Massachusetts Institute of Technology. MIT AI Memo
                 452.",
  month =        jan,
  year =         "1978",
}

@TechReport{StS:1979a,
  title =        "{Design of LISP-based Processors, or SCHEME: A
                 Dielectric LISP, or Finite Memories Considered Harmful,
                 or LAMBDA: The Ultimate Opcode}",
  author =       "Guy Lewis {Steele Jr.} and Gerald Jay Sussman",
  institution =  inst-MIT,
  type =         "AI Memos",
  number =       "AIM-514",
  year =         "1979",
  month =        mar,
  URL =          "https://hdl.handle.net/1721.1/5731",
}

@Article{StS:1980a,
  author =       "Guy Lewis {Steele Jr.} and Gerald Jay Sussman",
  title =        "{Design of a LISP-based Microprocessor}",
  journal =      "Communications of the ACM",
  year =         "1980",
  volume =       "23",
  number =       "11",
  pages =        "628--645",
  month =        nov,
  URL =          "https://dl.acm.org/doi/10.1145/359024.359031",
  doi =          "10.1145/359024.359031",
}

@Misc{Su:1982a,
  author =       "Gerald Jay Sussman",
  title =        "{LISP}, Programming and Implementation",
  note =         "Functional Programming and its Applications.",
  year =         "1982",
}

@TechReport{SuS:1975a,
  title =        "{SCHEME: An Interpreter for Extended Lambda
                 Calculus}",
  author =       "Gerald Jay Sussman and Guy Lewis {Steele Jr.}",
  institution =  inst-MIT,
  type =         "AI Memos",
  number =       "AIM-349",
  year =         "1975",
  month =        dec,
  URL =          "https://hdl.handle.net/1721.1/5794",
}

@PhdThesis{Ta:1985a,
  title =        "{The essence of Rum: A theory of the intensional and
                 extensional aspects of Lisp-type computation}",
  author =       "Carolyn L. Talcott",
  school =       "Stanford University",
  year =         "1985",
  URL =          "https://searchworks.stanford.edu/view/1190063",
}

@TechReport{Ta:1989a,
  title =        "{Programming and Proving with Function and Control
                 Abstractions}",
  author =       "Carolyn L. Talcott",
  institution =  "Stanford University",
  year =         "1989",
  month =        oct,
  number =       "STAN-CS-89-1288",
  URL =          "https://searchworks.stanford.edu/view/4620407",
  note =         "Labeled as CS-TR-89-1288 on readscheme.org",
}

@Misc{TaY:1996a,
  author =       "Kenjiro Taura and Akinori Yonezawa",
  title =        "Schematic: {A} Concurrent Object-Oriented Extension to
                 Scheme",
  note =         "Workshop on Object-Based Parallel and Distributed
                 Computing (OBPDC'96).",
  year =         "1996",
}

@Misc{Te:1995a,
  author =       "Thant Tessman",
  title =        "Adding Generic Functions to Scheme",
  note =         "SIGPLAN Notices. Volume 30. Number 5.",
  month =        may,
  year =         "1995",
}

@Misc{Tu:1992a,
  author =       "Sho-Huan Simon Tung",
  title =        "Merging Interactive, Modular and Object-Oriented
                 Programming",
  note =         "PhD. Thesis. Computer Science Department, Indiana
                 University. TR-349.",
  month =        mar,
  year =         "1992",
}

@Misc{TuK:2003a,
  author =       "David Tucker and Shriram Krishnamurthi",
  title =        "Pointcuts and Advice in Higher-Order Languages",
  note =         "Aspect-Oriented Software Development (AOSD 2003).",
  month =        apr,
  year =         "2003",
}

@Misc{TuK:2003b,
  author =       "David Tucker and Shriram Krishnamurthi",
  title =        "A Semantics for Pointcuts and Advice in Higher-Order
                 Languages",
  note =         "Brown University. Tech Report CS-02-13.",
  year =         "2003",
}

@Misc{Wa:1980a,
  author =       "Mitchell Wand",
  title =        "{SCHEME} Version 3.1 Reference Manual",
  note =         "Indiana University. Computer Science Technical Report
                 93.",
  month =        jun,
  year =         "1980",
}

@Misc{Wa:1999a,
  author =       "Oscar Waddell",
  title =        "Extending the Scope of Syntactic Abstraction",
  note =         "PhD. Thesis. Indiana University Computer Science
                 Department.",
  month =        aug,
  year =         "1999",
}

@Misc{WaD:1999a,
  author =       "Oscar Waddell and R. Kent Dybvig",
  title =        "Extending the Scope of Syntactic Abstraction",
  note =         "Conference Record of POPL'99: The 26th ACM
                 SIGPLAN-SIGACT Symposium on Principles of Programming
                 Languages.",
  month =        jan,
  year =         "1999",
}

@Misc{WaF:2007a,
  author =       "Philip Wadler and Robert Bruce Findler",
  title =        "Well-typed programs can't be blamed",
  note =         "2007 Workshop on Scheme and Functional Programming.",
  month =        sep,
  year =         "2007",
}

@Misc{WaK:2002a,
  author =       "Mitchell Wand and Gregor Kiczales and Christopher
                 Dutchyn",
  title =        "A Semantics for Advice and Dynamic Join Points in
                 Aspect-Oriented Programming",
  note =         "FOOL9 Workshop.",
  year =         "2002",
}

@Misc{WaK:2003a,
  author =       "Mitchell Wand and Gregor Kiczales and Christopher
                 Dutchyn",
  title =        "A Semantics for Advice and Dynamic Join Points in
                 Aspect-Oriented Programming",
  note =         "TOPLAS.",
  year =         "2003",
}

@Misc{WiF:2002a,
  author =       "Matthew Flatt Adam Wick and Wilson Hsieh",
  title =        "Reachability-based memory accounting",
  note =         "Workshop on Scheme and Functional Programming
                 (2002).",
  month =        oct,
  year =         "2002",
}

@Misc{WiF:2004a,
  author =       "Adam Wick and Matthew Flatt",
  title =        "Memory Accounting without Partitions",
  note =         "ISMM 2004.",
  year =         "2004",
}
